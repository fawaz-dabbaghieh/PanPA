/* Generated by Cython 0.29.36 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [],
        "language": "c++",
        "name": "PanPA.graph_smith_waterman_frameshift_aware",
        "sources": [
            "PanPA/graph_smith_waterman_frameshift_aware.pyx"
        ]
    },
    "module_name": "PanPA.graph_smith_waterman_frameshift_aware"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_36"
#define CYTHON_HEX_VERSION 0x001D24F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS ((PY_VERSION_HEX >= 0x030600B1) && (PY_VERSION_HEX < 0x030C00A5))
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__PanPA__graph_smith_waterman_frameshift_aware
#define __PYX_HAVE_API__PanPA__graph_smith_waterman_frameshift_aware
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <string.h>
#include <string>
#include <stdlib.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "PanPA/graph_smith_waterman_frameshift_aware.pyx",
  "stringsource",
  "PanPA/Graph.pxd",
  "PanPA/Alignment.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_5PanPA_5Graph_Graph;
struct __pyx_obj_5PanPA_9Alignment_Alignment;
struct __pyx_opt_args_5PanPA_5Graph_5Graph_read_gfa;

/* "PanPA/Graph.pxd":31
 *     cdef void top_sorting(self) except *
 * 
 *     cdef void read_gfa(self, str gfa_path, paths=*) except *             # <<<<<<<<<<<<<<
 *     cdef void write_gfa(self, str gfa_path) except *
 *     cdef str path_seq(self, list path)
 */
struct __pyx_opt_args_5PanPA_5Graph_5Graph_read_gfa {
  int __pyx_n;
  PyObject *paths;
};

/* "PanPA/Graph.pxd":5
 * 
 * 
 * cdef class Graph:             # <<<<<<<<<<<<<<
 * 
 *     cdef dict nodes, paths
 */
struct __pyx_obj_5PanPA_5Graph_Graph {
  PyObject_HEAD
  struct __pyx_vtabstruct_5PanPA_5Graph_Graph *__pyx_vtab;
  PyObject *nodes;
  PyObject *paths;
  PyObject *name;
  std::vector<int>  node_ends;
  std::vector<int>  intervals;
  std::vector<int>  in_nodes;
  PyObject *sorted;
  std::vector<int>  j_node;
  std::vector<int>  j_pos;
  int seq_len;
  std::vector<int>  all_seqs;
};


/* "PanPA/Alignment.pxd":4
 * 
 * 
 * cdef class Alignment:             # <<<<<<<<<<<<<<
 *     cdef list path, info
 *     cdef str read_name
 */
struct __pyx_obj_5PanPA_9Alignment_Alignment {
  PyObject_HEAD
  struct __pyx_vtabstruct_5PanPA_9Alignment_Alignment *__pyx_vtab;
  PyObject *path;
  PyObject *info;
  PyObject *read_name;
  int read_len;
  int alignment_score;
  int n_matches;
  int n_mismatches;
  int n_indels;
  float id_score;
  PyObject *gaf;
};



/* "PanPA/Graph.pxd":5
 * 
 * 
 * cdef class Graph:             # <<<<<<<<<<<<<<
 * 
 *     cdef dict nodes, paths
 */

struct __pyx_vtabstruct_5PanPA_5Graph_Graph {
  void (*prepare_graph)(struct __pyx_obj_5PanPA_5Graph_Graph *);
  void (*sort)(struct __pyx_obj_5PanPA_5Graph_Graph *);
  void (*add_paths)(struct __pyx_obj_5PanPA_5Graph_Graph *);
  void (*nodes_info)(struct __pyx_obj_5PanPA_5Graph_Graph *, PyObject *);
  int (*merge_end)(struct __pyx_obj_5PanPA_5Graph_Graph *, int);
  void (*compact)(struct __pyx_obj_5PanPA_5Graph_Graph *);
  void (*top_sorting)(struct __pyx_obj_5PanPA_5Graph_Graph *);
  void (*read_gfa)(struct __pyx_obj_5PanPA_5Graph_Graph *, PyObject *, struct __pyx_opt_args_5PanPA_5Graph_5Graph_read_gfa *__pyx_optional_args);
  void (*write_gfa)(struct __pyx_obj_5PanPA_5Graph_Graph *, PyObject *);
  PyObject *(*path_seq)(struct __pyx_obj_5PanPA_5Graph_Graph *, PyObject *);
};
static struct __pyx_vtabstruct_5PanPA_5Graph_Graph *__pyx_vtabptr_5PanPA_5Graph_Graph;


/* "PanPA/Alignment.pxd":4
 * 
 * 
 * cdef class Alignment:             # <<<<<<<<<<<<<<
 *     cdef list path, info
 *     cdef str read_name
 */

struct __pyx_vtabstruct_5PanPA_9Alignment_Alignment {
  void (*prepare_aa_gaf)(struct __pyx_obj_5PanPA_9Alignment_Alignment *, struct __pyx_obj_5PanPA_5Graph_Graph *);
  void (*prepare_dna_gaf)(struct __pyx_obj_5PanPA_9Alignment_Alignment *, struct __pyx_obj_5PanPA_5Graph_Graph *);
};
static struct __pyx_vtabstruct_5PanPA_9Alignment_Alignment *__pyx_vtabptr_5PanPA_9Alignment_Alignment;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* Profile.proto */
#ifndef CYTHON_PROFILE
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
  #define CYTHON_PROFILE 0
#else
  #define CYTHON_PROFILE 1
#endif
#endif
#ifndef CYTHON_TRACE_NOGIL
  #define CYTHON_TRACE_NOGIL 0
#else
  #if CYTHON_TRACE_NOGIL && !defined(CYTHON_TRACE)
    #define CYTHON_TRACE 1
  #endif
#endif
#ifndef CYTHON_TRACE
  #define CYTHON_TRACE 0
#endif
#if CYTHON_TRACE
  #undef CYTHON_PROFILE_REUSE_FRAME
#endif
#ifndef CYTHON_PROFILE_REUSE_FRAME
  #define CYTHON_PROFILE_REUSE_FRAME 0
#endif
#if CYTHON_PROFILE || CYTHON_TRACE
  #include "compile.h"
  #include "frameobject.h"
  #include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #if CYTHON_PROFILE_REUSE_FRAME
    #define CYTHON_FRAME_MODIFIER static
    #define CYTHON_FRAME_DEL(frame)
  #else
    #define CYTHON_FRAME_MODIFIER
    #define CYTHON_FRAME_DEL(frame) Py_CLEAR(frame)
  #endif
  #define __Pyx_TraceDeclarations\
      static PyCodeObject *__pyx_frame_code = NULL;\
      CYTHON_FRAME_MODIFIER PyFrameObject *__pyx_frame = NULL;\
      int __Pyx_use_tracing = 0;
  #define __Pyx_TraceFrameInit(codeobj)\
      if (codeobj) __pyx_frame_code = (PyCodeObject*) codeobj;
#if PY_VERSION_HEX >= 0x030b00a2
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     (unlikely((tstate)->cframe->use_tracing) &&\
         (!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #define __Pyx_EnterTracing(tstate) PyThreadState_EnterTracing(tstate)
  #define __Pyx_LeaveTracing(tstate) PyThreadState_LeaveTracing(tstate)
#elif PY_VERSION_HEX >= 0x030a00b1
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     (unlikely((tstate)->cframe->use_tracing) &&\
         (!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #define __Pyx_EnterTracing(tstate)\
      do { tstate->tracing++; tstate->cframe->use_tracing = 0; } while (0)
  #define __Pyx_LeaveTracing(tstate)\
      do {\
          tstate->tracing--;\
          tstate->cframe->use_tracing = ((CYTHON_TRACE && tstate->c_tracefunc != NULL)\
                                 || tstate->c_profilefunc != NULL);\
      } while (0)
#else
  #define __Pyx_IsTracing(tstate, check_tracing, check_funcs)\
     (unlikely((tstate)->use_tracing) &&\
         (!(check_tracing) || !(tstate)->tracing) &&\
         (!(check_funcs) || (tstate)->c_profilefunc || (CYTHON_TRACE && (tstate)->c_tracefunc)))
  #define __Pyx_EnterTracing(tstate)\
      do { tstate->tracing++; tstate->use_tracing = 0; } while (0)
  #define __Pyx_LeaveTracing(tstate)\
      do {\
          tstate->tracing--;\
          tstate->use_tracing = ((CYTHON_TRACE && tstate->c_tracefunc != NULL)\
                                         || tstate->c_profilefunc != NULL);\
      } while (0)
#endif
  #ifdef WITH_THREAD
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  if (nogil) {\
      if (CYTHON_TRACE_NOGIL) {\
          PyThreadState *tstate;\
          PyGILState_STATE state = PyGILState_Ensure();\
          tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 1, 1)) {\
              __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          }\
          PyGILState_Release(state);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  } else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (__Pyx_IsTracing(tstate, 1, 1)) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #else
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  {   PyThreadState* tstate = PyThreadState_GET();\
      if (__Pyx_IsTracing(tstate, 1, 1)) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, tstate, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #endif
  #define __Pyx_TraceException()\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 1)) {\
          __Pyx_EnterTracing(tstate);\
          PyObject *exc_info = __Pyx_GetExceptionTuple(tstate);\
          if (exc_info) {\
              if (CYTHON_TRACE && tstate->c_tracefunc)\
                  tstate->c_tracefunc(\
                      tstate->c_traceobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              tstate->c_profilefunc(\
                  tstate->c_profileobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              Py_DECREF(exc_info);\
          }\
          __Pyx_LeaveTracing(tstate);\
      }\
  }
  static void __Pyx_call_return_trace_func(PyThreadState *tstate, PyFrameObject *frame, PyObject *result) {
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      __Pyx_EnterTracing(tstate);
      if (CYTHON_TRACE && tstate->c_tracefunc)
          tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_RETURN, result);
      if (tstate->c_profilefunc)
          tstate->c_profilefunc(tstate->c_profileobj, frame, PyTrace_RETURN, result);
      CYTHON_FRAME_DEL(frame);
      __Pyx_LeaveTracing(tstate);
      __Pyx_ErrRestoreInState(tstate, type, value, traceback);
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (__Pyx_IsTracing(tstate, 0, 0)) {\
                  __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
              }\
              PyGILState_Release(state);\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 0, 0)) {\
              __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
          }\
      }\
  }
  #else
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 0)) {\
          __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
      }\
  }
  #endif
  static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno);
  static int __Pyx_TraceSetupAndCall(PyCodeObject** code, PyFrameObject** frame, PyThreadState* tstate, const char *funcname, const char *srcfile, int firstlineno);
#else
  #define __Pyx_TraceDeclarations
  #define __Pyx_TraceFrameInit(codeobj)
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)   if ((1)); else goto_error;
  #define __Pyx_TraceException()
  #define __Pyx_TraceReturn(result, nogil)
#endif
#if CYTHON_TRACE
  static int __Pyx_call_line_trace_func(PyThreadState *tstate, PyFrameObject *frame, int lineno) {
      int ret;
      PyObject *type, *value, *traceback;
      __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
      __Pyx_PyFrame_SetLineNumber(frame, lineno);
      __Pyx_EnterTracing(tstate);
      ret = tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_LINE, NULL);
      __Pyx_LeaveTracing(tstate);
      if (likely(!ret)) {
          __Pyx_ErrRestoreInState(tstate, type, value, traceback);
      } else {
          Py_XDECREF(type);
          Py_XDECREF(value);
          Py_XDECREF(traceback);
      }
      return ret;
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              int ret = 0;\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = __Pyx_PyThreadState_Current;\
              if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
                  ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              }\
              PyGILState_Release(state);\
              if (unlikely(ret)) goto_error;\
          }\
      } else {\
          PyThreadState* tstate = __Pyx_PyThreadState_Current;\
          if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
              int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              if (unlikely(ret)) goto_error;\
          }\
      }\
  }
  #else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = __Pyx_PyThreadState_Current;\
      if (__Pyx_IsTracing(tstate, 0, 0) && tstate->c_tracefunc && __pyx_frame->f_trace) {\
          int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
          if (unlikely(ret)) goto_error;\
      }\
  }
  #endif
#else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)   if ((1)); else goto_error;
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_str(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_str(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* IncludeStringH.proto */
#include <string.h>

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* unicode_iter.proto */
static CYTHON_INLINE int __Pyx_init_unicode_iteration(
    PyObject* ustring, Py_ssize_t *length, void** data, int *kind);

/* GetItemIntUnicode.proto */
#define __Pyx_GetItemInt_Unicode(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Unicode_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "string index out of range"), (Py_UCS4)-1))
static CYTHON_INLINE Py_UCS4 __Pyx_GetItemInt_Unicode_Fast(PyObject* ustring, Py_ssize_t i,
                                                           int wraparound, int boundscheck);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_0_29_36
#define __PYX_HAVE_RT_ImportType_proto_0_29_36
#if __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if __STDC_VERSION__ >= 201112L || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_0_29_36(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_0_29_36(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_0_29_36 {
   __Pyx_ImportType_CheckSize_Error_0_29_36 = 0,
   __Pyx_ImportType_CheckSize_Warn_0_29_36 = 1,
   __Pyx_ImportType_CheckSize_Ignore_0_29_36 = 2
};
static PyTypeObject *__Pyx_ImportType_0_29_36(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_0_29_36 check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* None.proto */
#include <new>

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'PanPA.Graph' */
static PyTypeObject *__pyx_ptype_5PanPA_5Graph_Graph = 0;

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'PanPA.Alignment' */
static PyTypeObject *__pyx_ptype_5PanPA_9Alignment_Alignment = 0;

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'PanPA.graph_smith_waterman_frameshift_aware' */
static void __pyx_f_5PanPA_37graph_smith_waterman_frameshift_aware_print_dp_table(int, int, int *, std::vector<int> , std::vector<int> ); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "PanPA.graph_smith_waterman_frameshift_aware"
extern int __pyx_module_is_main_PanPA__graph_smith_waterman_frameshift_aware;
int __pyx_module_is_main_PanPA__graph_smith_waterman_frameshift_aware = 0;

/* Implementation of 'PanPA.graph_smith_waterman_frameshift_aware' */
static PyObject *__pyx_builtin_open;
static PyObject *__pyx_builtin_chr;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_range;
static const char __pyx_k_A[] = "A";
static const char __pyx_k_C[] = "C";
static const char __pyx_k_G[] = "G";
static const char __pyx_k_N[] = "N";
static const char __pyx_k_T[] = "T";
static const char __pyx_k_w[] = "w";
static const char __pyx_k__2[] = "    ";
static const char __pyx_k__3[] = " ";
static const char __pyx_k__4[] = "  ";
static const char __pyx_k__5[] = "\n";
static const char __pyx_k__6[] = "[";
static const char __pyx_k__7[] = "";
static const char __pyx_k__8[] = "]";
static const char __pyx_k__9[] = ",";
static const char __pyx_k__12[] = "_";
static const char __pyx_k__13[] = "---";
static const char __pyx_k_chr[] = "chr";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_open[] = "open";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_type[] = "type";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_write[] = "write";
static const char __pyx_k_node_id[] = "node_id";
static const char __pyx_k_node_pos[] = "node_pos";
static const char __pyx_k_node_str[] = "node_str";
static const char __pyx_k_read_pos[] = "read_pos";
static const char __pyx_k_read_str[] = "read_str";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_dp_table_csv[] = "dp_table.csv";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_This_is_the_dp_table[] = "This is the dp table\n";
static PyObject *__pyx_n_u_A;
static PyObject *__pyx_n_u_C;
static PyObject *__pyx_n_u_G;
static PyObject *__pyx_n_u_N;
static PyObject *__pyx_n_u_T;
static PyObject *__pyx_kp_u_This_is_the_dp_table;
static PyObject *__pyx_n_u__12;
static PyObject *__pyx_kp_u__13;
static PyObject *__pyx_kp_u__2;
static PyObject *__pyx_kp_u__3;
static PyObject *__pyx_kp_u__4;
static PyObject *__pyx_kp_u__5;
static PyObject *__pyx_kp_u__6;
static PyObject *__pyx_kp_u__7;
static PyObject *__pyx_kp_u__8;
static PyObject *__pyx_kp_u__9;
static PyObject *__pyx_n_s_chr;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_kp_u_dp_table_csv;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_u_node_id;
static PyObject *__pyx_n_u_node_pos;
static PyObject *__pyx_n_u_node_str;
static PyObject *__pyx_n_s_open;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_u_read_pos;
static PyObject *__pyx_n_u_read_str;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_u_type;
static PyObject *__pyx_n_u_w;
static PyObject *__pyx_n_s_write;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
/* Late includes */

/* "PanPA/graph_smith_waterman_frameshift_aware.pyx":10
 * from libcpp.string cimport string
 * 
 * cdef void print_dp_table(int graph_seq_len, int read_len, int *dp_table, vector[int] graph_seq,             # <<<<<<<<<<<<<<
 *                          vector[int] read_seq):
 *     """
 */

static void __pyx_f_5PanPA_37graph_smith_waterman_frameshift_aware_print_dp_table(int __pyx_v_graph_seq_len, int __pyx_v_read_len, int *__pyx_v_dp_table, std::vector<int>  __pyx_v_graph_seq, std::vector<int>  __pyx_v_read_seq) {
  PyObject *__pyx_v_line = NULL;
  int __pyx_v_i;
  int __pyx_v_row;
  int __pyx_v_j;
  PyObject *__pyx_v_process_nucleotides = NULL;
  PyObject *__pyx_v_out_dp = NULL;
  PyObject *__pyx_v_graph_seq_chr = NULL;
  PyObject *__pyx_v_read_seq_chr = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<int> ::iterator __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  long __pyx_t_8;
  long __pyx_t_9;
  long __pyx_t_10;
  long __pyx_t_11;
  int __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_UCS4 __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("print_dp_table", 0);
  __Pyx_TraceCall("print_dp_table", __pyx_f[0], 10, 0, __PYX_ERR(0, 10, __pyx_L1_error));

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":16
 *     turns the 1D table back into 2D and prints each line
 *     """
 *     line = []             # <<<<<<<<<<<<<<
 *     cdef int i, row, j
 *     process_nucleotides = {0: "A", 1: "C", 2: "T", 3: "G", 4: "N"}
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_line = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":18
 *     line = []
 *     cdef int i, row, j
 *     process_nucleotides = {0: "A", 1: "C", 2: "T", 3: "G", 4: "N"}             # <<<<<<<<<<<<<<
 * 
 *     out_dp = open("dp_table.csv", "w")
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_0, __pyx_n_u_A) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_1, __pyx_n_u_C) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_2, __pyx_n_u_T) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_3, __pyx_n_u_G) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_4, __pyx_n_u_N) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  __pyx_v_process_nucleotides = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":20
 *     process_nucleotides = {0: "A", 1: "C", 2: "T", 3: "G", 4: "N"}
 * 
 *     out_dp = open("dp_table.csv", "w")             # <<<<<<<<<<<<<<
 * 
 *     graph_seq_chr = []
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_out_dp = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":22
 *     out_dp = open("dp_table.csv", "w")
 * 
 *     graph_seq_chr = []             # <<<<<<<<<<<<<<
 *     for i in graph_seq:
 *         graph_seq_chr.append(chr(i + 65))
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_graph_seq_chr = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":23
 * 
 *     graph_seq_chr = []
 *     for i in graph_seq:             # <<<<<<<<<<<<<<
 *         graph_seq_chr.append(chr(i + 65))
 * 
 */
  __pyx_t_2 = __pyx_v_graph_seq.begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_v_graph_seq.end())) break;
    __pyx_t_3 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_i = __pyx_t_3;

    /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":24
 *     graph_seq_chr = []
 *     for i in graph_seq:
 *         graph_seq_chr.append(chr(i + 65))             # <<<<<<<<<<<<<<
 * 
 *     read_seq_chr = []
 */
    __pyx_t_1 = __Pyx_PyInt_From_long((__pyx_v_i + 65)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 24, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_chr, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 24, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_graph_seq_chr, __pyx_t_4); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 24, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":23
 * 
 *     graph_seq_chr = []
 *     for i in graph_seq:             # <<<<<<<<<<<<<<
 *         graph_seq_chr.append(chr(i + 65))
 * 
 */
  }

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":26
 *         graph_seq_chr.append(chr(i + 65))
 * 
 *     read_seq_chr = []             # <<<<<<<<<<<<<<
 *     for i in read_seq:
 *         read_seq_chr.append(process_nucleotides[i])
 */
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_read_seq_chr = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":27
 * 
 *     read_seq_chr = []
 *     for i in read_seq:             # <<<<<<<<<<<<<<
 *         read_seq_chr.append(process_nucleotides[i])
 * 
 */
  __pyx_t_2 = __pyx_v_read_seq.begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_v_read_seq.end())) break;
    __pyx_t_3 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_i = __pyx_t_3;

    /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":28
 *     read_seq_chr = []
 *     for i in read_seq:
 *         read_seq_chr.append(process_nucleotides[i])             # <<<<<<<<<<<<<<
 * 
 *     print("    " + " ".join(graph_seq_chr))
 */
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 28, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_process_nucleotides, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_read_seq_chr, __pyx_t_1); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 28, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":27
 * 
 *     read_seq_chr = []
 *     for i in read_seq:             # <<<<<<<<<<<<<<
 *         read_seq_chr.append(process_nucleotides[i])
 * 
 */
  }

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":30
 *         read_seq_chr.append(process_nucleotides[i])
 * 
 *     print("    " + " ".join(graph_seq_chr))             # <<<<<<<<<<<<<<
 *     out_dp.write("  " + " ".join(graph_seq_chr))
 *     out_dp.write("\n")
 */
  __pyx_t_1 = PyUnicode_Join(__pyx_kp_u__3, __pyx_v_graph_seq_chr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_kp_u__2, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":31
 * 
 *     print("    " + " ".join(graph_seq_chr))
 *     out_dp.write("  " + " ".join(graph_seq_chr))             # <<<<<<<<<<<<<<
 *     out_dp.write("\n")
 *     for i in range(read_len + 2):
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_out_dp, __pyx_n_s_write); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = PyUnicode_Join(__pyx_kp_u__3, __pyx_v_graph_seq_chr); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyUnicode_Concat(__pyx_kp_u__4, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_7);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":32
 *     print("    " + " ".join(graph_seq_chr))
 *     out_dp.write("  " + " ".join(graph_seq_chr))
 *     out_dp.write("\n")             # <<<<<<<<<<<<<<
 *     for i in range(read_len + 2):
 *         row = i * (graph_seq_len + 1)
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_out_dp, __pyx_n_s_write); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_7, __pyx_kp_u__5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u__5);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":33
 *     out_dp.write("  " + " ".join(graph_seq_chr))
 *     out_dp.write("\n")
 *     for i in range(read_len + 2):             # <<<<<<<<<<<<<<
 *         row = i * (graph_seq_len + 1)
 *         for j in range(graph_seq_len + 1):
 */
  __pyx_t_8 = (__pyx_v_read_len + 2);
  __pyx_t_9 = __pyx_t_8;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_9; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":34
 *     out_dp.write("\n")
 *     for i in range(read_len + 2):
 *         row = i * (graph_seq_len + 1)             # <<<<<<<<<<<<<<
 *         for j in range(graph_seq_len + 1):
 *             line.append(dp_table[row + j])
 */
    __pyx_v_row = (__pyx_v_i * (__pyx_v_graph_seq_len + 1));

    /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":35
 *     for i in range(read_len + 2):
 *         row = i * (graph_seq_len + 1)
 *         for j in range(graph_seq_len + 1):             # <<<<<<<<<<<<<<
 *             line.append(dp_table[row + j])
 *         if i == 0 or i == 1:
 */
    __pyx_t_10 = (__pyx_v_graph_seq_len + 1);
    __pyx_t_11 = __pyx_t_10;
    for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
      __pyx_v_j = __pyx_t_12;

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":36
 *         row = i * (graph_seq_len + 1)
 *         for j in range(graph_seq_len + 1):
 *             line.append(dp_table[row + j])             # <<<<<<<<<<<<<<
 *         if i == 0 or i == 1:
 *             print(f"  {line}".replace("[", "").replace("]", "").replace(",", ""))
 */
      __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_dp_table[(__pyx_v_row + __pyx_v_j)])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 36, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_line, __pyx_t_1); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 36, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }

    /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":37
 *         for j in range(graph_seq_len + 1):
 *             line.append(dp_table[row + j])
 *         if i == 0 or i == 1:             # <<<<<<<<<<<<<<
 *             print(f"  {line}".replace("[", "").replace("]", "").replace(",", ""))
 *             out_dp.write(f" {line}".replace("[", "").replace("]", "").replace(",", ""))
 */
    switch (__pyx_v_i) {
      case 0:
      case 1:

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":38
 *             line.append(dp_table[row + j])
 *         if i == 0 or i == 1:
 *             print(f"  {line}".replace("[", "").replace("]", "").replace(",", ""))             # <<<<<<<<<<<<<<
 *             out_dp.write(f" {line}".replace("[", "").replace("]", "").replace(",", ""))
 *             out_dp.write("\n")
 */
      __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_line, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_kp_u__4, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 38, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyUnicode_Replace(((PyObject*)__pyx_t_4), __pyx_kp_u__6, __pyx_kp_u__7, -1L); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyUnicode_Replace(((PyObject*)__pyx_t_1), __pyx_kp_u__8, __pyx_kp_u__7, -1L); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 38, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyUnicode_Replace(((PyObject*)__pyx_t_4), __pyx_kp_u__9, __pyx_kp_u__7, -1L); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 38, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":39
 *         if i == 0 or i == 1:
 *             print(f"  {line}".replace("[", "").replace("]", "").replace(",", ""))
 *             out_dp.write(f" {line}".replace("[", "").replace("]", "").replace(",", ""))             # <<<<<<<<<<<<<<
 *             out_dp.write("\n")
 *         else:
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_out_dp, __pyx_n_s_write); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 39, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_v_line, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 39, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = __Pyx_PyUnicode_Concat(__pyx_kp_u__3, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 39, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyUnicode_Replace(((PyObject*)__pyx_t_6), __pyx_kp_u__6, __pyx_kp_u__7, -1L); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 39, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyUnicode_Replace(((PyObject*)__pyx_t_7), __pyx_kp_u__8, __pyx_kp_u__7, -1L); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 39, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyUnicode_Replace(((PyObject*)__pyx_t_6), __pyx_kp_u__9, __pyx_kp_u__7, -1L); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 39, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 39, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":40
 *             print(f"  {line}".replace("[", "").replace("]", "").replace(",", ""))
 *             out_dp.write(f" {line}".replace("[", "").replace("]", "").replace(",", ""))
 *             out_dp.write("\n")             # <<<<<<<<<<<<<<
 *         else:
 *             print(f"{read_seq_chr[i - 2]} {line}".replace("[", "").replace("]", "").replace(",", ""))
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_out_dp, __pyx_n_s_write); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_7, __pyx_kp_u__5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_kp_u__5);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 40, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":37
 *         for j in range(graph_seq_len + 1):
 *             line.append(dp_table[row + j])
 *         if i == 0 or i == 1:             # <<<<<<<<<<<<<<
 *             print(f"  {line}".replace("[", "").replace("]", "").replace(",", ""))
 *             out_dp.write(f" {line}".replace("[", "").replace("]", "").replace(",", ""))
 */
      break;
      default:

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":42
 *             out_dp.write("\n")
 *         else:
 *             print(f"{read_seq_chr[i - 2]} {line}".replace("[", "").replace("]", "").replace(",", ""))             # <<<<<<<<<<<<<<
 *             out_dp.write(f"{read_seq_chr[i - 2]} {line}".replace("[", "").replace("]", "").replace(",", ""))
 *             out_dp.write("\n")
 */
      __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 42, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_13 = 0;
      __pyx_t_14 = 127;
      __pyx_t_10 = (__pyx_v_i - 2);
      __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_read_seq_chr, __pyx_t_10, long, 1, __Pyx_PyInt_From_long, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 42, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_1, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 42, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_14;
      __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_7);
      __pyx_t_7 = 0;
      __Pyx_INCREF(__pyx_kp_u__3);
      __pyx_t_13 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__3);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_kp_u__3);
      __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_v_line, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 42, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_14;
      __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_4, 3, __pyx_t_13, __pyx_t_14); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 42, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyUnicode_Replace(((PyObject*)__pyx_t_7), __pyx_kp_u__6, __pyx_kp_u__7, -1L); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 42, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyUnicode_Replace(((PyObject*)__pyx_t_4), __pyx_kp_u__8, __pyx_kp_u__7, -1L); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 42, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyUnicode_Replace(((PyObject*)__pyx_t_7), __pyx_kp_u__9, __pyx_kp_u__7, -1L); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 42, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 42, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":43
 *         else:
 *             print(f"{read_seq_chr[i - 2]} {line}".replace("[", "").replace("]", "").replace(",", ""))
 *             out_dp.write(f"{read_seq_chr[i - 2]} {line}".replace("[", "").replace("]", "").replace(",", ""))             # <<<<<<<<<<<<<<
 *             out_dp.write("\n")
 *         line = []
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_out_dp, __pyx_n_s_write); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 43, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 43, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_13 = 0;
      __pyx_t_14 = 127;
      __pyx_t_10 = (__pyx_v_i - 2);
      __pyx_t_6 = __Pyx_GetItemInt_List(__pyx_v_read_seq_chr, __pyx_t_10, long, 1, __Pyx_PyInt_From_long, 1, 1, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 43, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_15 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 43, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_15) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_15) : __pyx_t_14;
      __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_15);
      __Pyx_GIVEREF(__pyx_t_15);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_15);
      __pyx_t_15 = 0;
      __Pyx_INCREF(__pyx_kp_u__3);
      __pyx_t_13 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__3);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_kp_u__3);
      __pyx_t_15 = __Pyx_PyObject_FormatSimple(__pyx_v_line, __pyx_empty_unicode); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 43, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_15) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_15) : __pyx_t_14;
      __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_15);
      __Pyx_GIVEREF(__pyx_t_15);
      PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_15);
      __pyx_t_15 = 0;
      __pyx_t_15 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_13, __pyx_t_14); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 43, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyUnicode_Replace(((PyObject*)__pyx_t_15), __pyx_kp_u__6, __pyx_kp_u__7, -1L); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 43, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_15 = PyUnicode_Replace(((PyObject*)__pyx_t_1), __pyx_kp_u__8, __pyx_kp_u__7, -1L); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 43, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyUnicode_Replace(((PyObject*)__pyx_t_15), __pyx_kp_u__9, __pyx_kp_u__7, -1L); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 43, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_15 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_15)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_15);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_7 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_15, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_1);
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 43, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":44
 *             print(f"{read_seq_chr[i - 2]} {line}".replace("[", "").replace("]", "").replace(",", ""))
 *             out_dp.write(f"{read_seq_chr[i - 2]} {line}".replace("[", "").replace("]", "").replace(",", ""))
 *             out_dp.write("\n")             # <<<<<<<<<<<<<<
 *         line = []
 *     print("\n")
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_out_dp, __pyx_n_s_write); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 44, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      __pyx_t_7 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_1, __pyx_kp_u__5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u__5);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 44, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      break;
    }

    /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":45
 *             out_dp.write(f"{read_seq_chr[i - 2]} {line}".replace("[", "").replace("]", "").replace(",", ""))
 *             out_dp.write("\n")
 *         line = []             # <<<<<<<<<<<<<<
 *     print("\n")
 * 
 */
    __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF_SET(__pyx_v_line, ((PyObject*)__pyx_t_7));
    __pyx_t_7 = 0;
  }

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":46
 *             out_dp.write("\n")
 *         line = []
 *     print("\n")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":10
 * from libcpp.string cimport string
 * 
 * cdef void print_dp_table(int graph_seq_len, int read_len, int *dp_table, vector[int] graph_seq,             # <<<<<<<<<<<<<<
 *                          vector[int] read_seq):
 *     """
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_WriteUnraisable("PanPA.graph_smith_waterman_frameshift_aware.print_dp_table", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_process_nucleotides);
  __Pyx_XDECREF(__pyx_v_out_dp);
  __Pyx_XDECREF(__pyx_v_graph_seq_chr);
  __Pyx_XDECREF(__pyx_v_read_seq_chr);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "PanPA/graph_smith_waterman_frameshift_aware.pyx":49
 * 
 * 
 * cdef vector[string] align_to_graph_sw_fsa(Graph graph, str read, str read_name, bint print_dp,             # <<<<<<<<<<<<<<
 *                                           vector[int] sub_matrix, int gap_score, int fs_score, float min_id_score,
 *                                           vector[vector[vector[int]]] codon_translate_0base,
 */

static std::vector<std::string>  __pyx_f_5PanPA_37graph_smith_waterman_frameshift_aware_align_to_graph_sw_fsa(struct __pyx_obj_5PanPA_5Graph_Graph *__pyx_v_graph, PyObject *__pyx_v_read, PyObject *__pyx_v_read_name, int __pyx_v_print_dp, CYTHON_UNUSED std::vector<int>  __pyx_v_sub_matrix, int __pyx_v_gap_score, int __pyx_v_fs_score, float __pyx_v_min_id_score, std::vector<std::vector<std::vector<int> > >  __pyx_v_codon_translate_0base, std::vector<int>  __pyx_v_neucleotide_to_int) {
  std::vector<std::string>  __pyx_v_alignments;
  int __pyx_v_codon;
  std::vector<int>  __pyx_v_intervals;
  std::vector<int>  __pyx_v_in_nodes_vec;
  std::vector<int>  __pyx_v_j_node;
  std::vector<int>  __pyx_v_j_pos;
  std::vector<int>  __pyx_v_node_ends;
  std::vector<int>  __pyx_v_in_nodes;
  size_t __pyx_v_in_nodes_size;
  std::vector<int>  __pyx_v_all_seq_as_int;
  int __pyx_v_which_node;
  int __pyx_v_global_max;
  std::vector<int>  __pyx_v_global_max_coord;
  int __pyx_v_in_nodes_max;
  int __pyx_v_in_nodes_max_coord;
  int __pyx_v_dimensions;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_left_cell;
  int __pyx_v_current_cell;
  int __pyx_v_above_cell;
  int __pyx_v_diagonal_cell;
  int __pyx_v_row;
  int __pyx_v_l;
  int __pyx_v_match_miss;
  int __pyx_v_deletion;
  int __pyx_v_insertion;
  int __pyx_v_local_max;
  int __pyx_v_previous_node;
  int __pyx_v_previous_j;
  CYTHON_UNUSED int __pyx_v_current_node_id;
  int __pyx_v_current_node_pos;
  CYTHON_UNUSED int __pyx_v_counter;
  std::vector<int>  __pyx_v_read_as_int;
  int *__pyx_v_dp_table;
  int __pyx_v_read_len;
  int __pyx_v_graph_seq_len;
  int __pyx_v_nuc;
  Py_UCS4 __pyx_v_c;
  int *__pyx_v_traceback_table;
  CYTHON_UNUSED long __pyx_v_maximum;
  long __pyx_v_diagonal_insertion;
  long __pyx_v_diagonal_deletion;
  int __pyx_v_fs_deletion;
  int __pyx_v_fs_insertion;
  int __pyx_v_coord;
  int __pyx_v_back_coord;
  struct __pyx_obj_5PanPA_9Alignment_Alignment *__pyx_v_alignment = 0;
  CYTHON_UNUSED int __pyx_v_traceback_max;
  int __pyx_v_back_j;
  int __pyx_v_back_i;
  CYTHON_UNUSED int __pyx_v_test;
  float __pyx_v_alignment_score;
  PyObject *__pyx_v_graph_character = NULL;
  long __pyx_v_cigar_type;
  int __pyx_v_codon1;
  int __pyx_v_codon2;
  std::vector<std::string>  __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  std::vector<int>  __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  void *__pyx_t_8;
  Py_ssize_t __pyx_t_9;
  long __pyx_t_10;
  long __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  long __pyx_t_19;
  int __pyx_t_20;
  int __pyx_t_21;
  long __pyx_t_22;
  std::vector<int> ::iterator __pyx_t_23;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  PyObject *__pyx_t_26 = NULL;
  Py_UCS4 __pyx_t_27;
  int __pyx_t_28;
  float __pyx_t_29;
  std::string __pyx_t_30;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("align_to_graph_sw_fsa", 0);
  __Pyx_TraceCall("align_to_graph_sw_fsa", __pyx_f[0], 49, 0, __PYX_ERR(0, 49, __pyx_L1_error));

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":75
 *     # in_nodes_map = graph.in_nodes_map
 *     cdef vector[int] intervals
 *     intervals = graph.intervals             # <<<<<<<<<<<<<<
 *     cdef vector[int] in_nodes_vec
 *     in_nodes_vec = graph.in_nodes
 */
  __pyx_t_1 = __pyx_v_graph->intervals;
  __pyx_v_intervals = __pyx_t_1;

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":77
 *     intervals = graph.intervals
 *     cdef vector[int] in_nodes_vec
 *     in_nodes_vec = graph.in_nodes             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[int] j_node, j_pos, node_ends
 */
  __pyx_t_1 = __pyx_v_graph->in_nodes;
  __pyx_v_in_nodes_vec = __pyx_t_1;

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":80
 * 
 *     cdef vector[int] j_node, j_pos, node_ends
 *     node_ends = graph.node_ends             # <<<<<<<<<<<<<<
 *     j_node = graph.j_node
 *     j_pos = graph.j_pos
 */
  __pyx_t_1 = __pyx_v_graph->node_ends;
  __pyx_v_node_ends = __pyx_t_1;

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":81
 *     cdef vector[int] j_node, j_pos, node_ends
 *     node_ends = graph.node_ends
 *     j_node = graph.j_node             # <<<<<<<<<<<<<<
 *     j_pos = graph.j_pos
 * 
 */
  __pyx_t_1 = __pyx_v_graph->j_node;
  __pyx_v_j_node = __pyx_t_1;

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":82
 *     node_ends = graph.node_ends
 *     j_node = graph.j_node
 *     j_pos = graph.j_pos             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[int] in_nodes
 */
  __pyx_t_1 = __pyx_v_graph->j_pos;
  __pyx_v_j_pos = __pyx_t_1;

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":88
 * 
 *     cdef vector[int] all_seq_as_int
 *     all_seq_as_int = graph.all_seqs             # <<<<<<<<<<<<<<
 *     #########################################################
 * 
 */
  __pyx_t_1 = __pyx_v_graph->all_seqs;
  __pyx_v_all_seq_as_int = __pyx_t_1;

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":95
 *     Defining some variables I need for the algorithm
 *     """
 *     cdef int which_node = -1  # counter to tell me in which node I am in the column loop             # <<<<<<<<<<<<<<
 * 
 *     # keeping track of all possible max scores in the whole dp_table
 */
  __pyx_v_which_node = -1;

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":98
 * 
 *     # keeping track of all possible max scores in the whole dp_table
 *     cdef int global_max = 0             # <<<<<<<<<<<<<<
 *     cdef vector[int] global_max_coord  # cell coordinates of all max scores (if more than one exist)
 * 
 */
  __pyx_v_global_max = 0;

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":114
 *     """
 *     cdef int current_node_id, current_node_pos
 *     cdef int counter = 0  # for testing             # <<<<<<<<<<<<<<
 *     #########################################################
 * 
 */
  __pyx_v_counter = 0;

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":130
 * 
 *     cdef int nuc
 *     read_len = len(read)             # <<<<<<<<<<<<<<
 *     graph_seq_len = graph.all_seqs.size()
 * 
 */
  if (unlikely(__pyx_v_read == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 130, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyUnicode_GET_LENGTH(__pyx_v_read); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 130, __pyx_L1_error)
  __pyx_v_read_len = __pyx_t_2;

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":131
 *     cdef int nuc
 *     read_len = len(read)
 *     graph_seq_len = graph.all_seqs.size()             # <<<<<<<<<<<<<<
 * 
 *     # + 2 because of the 2 extra initialization lines for the jumps
 */
  __pyx_v_graph_seq_len = __pyx_v_graph->all_seqs.size();

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":134
 * 
 *     # + 2 because of the 2 extra initialization lines for the jumps
 *     dimensions = (read_len + 2) * (graph_seq_len + 1)             # <<<<<<<<<<<<<<
 *     dp_table = <int *> malloc(dimensions * sizeof(int))  # allocating memory
 * 
 */
  __pyx_v_dimensions = ((__pyx_v_read_len + 2) * (__pyx_v_graph_seq_len + 1));

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":135
 *     # + 2 because of the 2 extra initialization lines for the jumps
 *     dimensions = (read_len + 2) * (graph_seq_len + 1)
 *     dp_table = <int *> malloc(dimensions * sizeof(int))  # allocating memory             # <<<<<<<<<<<<<<
 * 
 *     # initializing the vector with 0s, otherwise random values will be filled
 */
  __pyx_v_dp_table = ((int *)malloc((__pyx_v_dimensions * (sizeof(int)))));

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":138
 * 
 *     # initializing the vector with 0s, otherwise random values will be filled
 *     for i in range(dimensions):             # <<<<<<<<<<<<<<
 *         dp_table[i] = 0
 * 
 */
  __pyx_t_3 = __pyx_v_dimensions;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":139
 *     # initializing the vector with 0s, otherwise random values will be filled
 *     for i in range(dimensions):
 *         dp_table[i] = 0             # <<<<<<<<<<<<<<
 * 
 *     """
 */
    (__pyx_v_dp_table[__pyx_v_i]) = 0;
  }

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":151
 *     # for c in read:
 *     #     read_as_int.push_back(ord(c) - 65)
 *     for c in read:             # <<<<<<<<<<<<<<
 *         # print(f"converting letter {c} with ord {ord(c)}")
 *         nuc = ord(c)
 */
  if (unlikely(__pyx_v_read == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
    __PYX_ERR(0, 151, __pyx_L1_error)
  }
  __Pyx_INCREF(__pyx_v_read);
  __pyx_t_6 = __pyx_v_read;
  __pyx_t_4 = __Pyx_init_unicode_iteration(__pyx_t_6, (&__pyx_t_7), (&__pyx_t_8), (&__pyx_t_3)); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 151, __pyx_L1_error)
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_7; __pyx_t_9++) {
    __pyx_t_2 = __pyx_t_9;
    __pyx_v_c = __Pyx_PyUnicode_READ(__pyx_t_3, __pyx_t_8, __pyx_t_2);

    /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":153
 *     for c in read:
 *         # print(f"converting letter {c} with ord {ord(c)}")
 *         nuc = ord(c)             # <<<<<<<<<<<<<<
 *         read_as_int.push_back(neucleotide_to_int[nuc])
 * 
 */
    __pyx_v_nuc = ((long)__pyx_v_c);

    /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":154
 *         # print(f"converting letter {c} with ord {ord(c)}")
 *         nuc = ord(c)
 *         read_as_int.push_back(neucleotide_to_int[nuc])             # <<<<<<<<<<<<<<
 * 
 * 
 */
    try {
      __pyx_v_read_as_int.push_back((__pyx_v_neucleotide_to_int[__pyx_v_nuc]));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 154, __pyx_L1_error)
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":159
 *     # a traceback table also filled with 0s, later will be filled with the index of where the score came from
 *     cdef int *traceback_table
 *     traceback_table = <int *> malloc(dimensions * sizeof(int))             # <<<<<<<<<<<<<<
 *     for i in range(dimensions):
 *         traceback_table[i] = 0
 */
  __pyx_v_traceback_table = ((int *)malloc((__pyx_v_dimensions * (sizeof(int)))));

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":160
 *     cdef int *traceback_table
 *     traceback_table = <int *> malloc(dimensions * sizeof(int))
 *     for i in range(dimensions):             # <<<<<<<<<<<<<<
 *         traceback_table[i] = 0
 * 
 */
  __pyx_t_3 = __pyx_v_dimensions;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":161
 *     traceback_table = <int *> malloc(dimensions * sizeof(int))
 *     for i in range(dimensions):
 *         traceback_table[i] = 0             # <<<<<<<<<<<<<<
 * 
 *     #########################################################
 */
    (__pyx_v_traceback_table[__pyx_v_i]) = 0;
  }

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":167
 *     # print(f"graph seq len is {graph_seq_len}")
 *     # -2 because I skip the first two nucleotide and consider the codon from its last nucleotide
 *     for i in range(read_len - 2):             # <<<<<<<<<<<<<<
 *         # adding one to keep first row and first column 0
 *         i += 2
 */
  __pyx_t_10 = (__pyx_v_read_len - 2);
  __pyx_t_11 = __pyx_t_10;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_11; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":169
 *     for i in range(read_len - 2):
 *         # adding one to keep first row and first column 0
 *         i += 2             # <<<<<<<<<<<<<<
 *         codon = codon_translate_0base[read_as_int[i - 2]][read_as_int[i - 1]][read_as_int[i]]
 *         i += 2
 */
    __pyx_v_i = (__pyx_v_i + 2);

    /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":170
 *         # adding one to keep first row and first column 0
 *         i += 2
 *         codon = codon_translate_0base[read_as_int[i - 2]][read_as_int[i - 1]][read_as_int[i]]             # <<<<<<<<<<<<<<
 *         i += 2
 *         which_node = -1  # resetting the node counter
 */
    __pyx_v_codon = (((__pyx_v_codon_translate_0base[(__pyx_v_read_as_int[(__pyx_v_i - 2)])])[(__pyx_v_read_as_int[(__pyx_v_i - 1)])])[(__pyx_v_read_as_int[__pyx_v_i])]);

    /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":171
 *         i += 2
 *         codon = codon_translate_0base[read_as_int[i - 2]][read_as_int[i - 1]][read_as_int[i]]
 *         i += 2             # <<<<<<<<<<<<<<
 *         which_node = -1  # resetting the node counter
 * 
 */
    __pyx_v_i = (__pyx_v_i + 2);

    /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":172
 *         codon = codon_translate_0base[read_as_int[i - 2]][read_as_int[i - 1]][read_as_int[i]]
 *         i += 2
 *         which_node = -1  # resetting the node counter             # <<<<<<<<<<<<<<
 * 
 *         # because the dp table is 1d, I need to convert between i,j to 1d coordinates
 */
    __pyx_v_which_node = -1;

    /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":175
 * 
 *         # because the dp table is 1d, I need to convert between i,j to 1d coordinates
 *         row = i * (graph_seq_len + 1)             # <<<<<<<<<<<<<<
 *         for j in range(graph_seq_len):
 * 
 */
    __pyx_v_row = (__pyx_v_i * (__pyx_v_graph_seq_len + 1));

    /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":176
 *         # because the dp table is 1d, I need to convert between i,j to 1d coordinates
 *         row = i * (graph_seq_len + 1)
 *         for j in range(graph_seq_len):             # <<<<<<<<<<<<<<
 * 
 *             # counter += 1
 */
    __pyx_t_4 = __pyx_v_graph_seq_len;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_5; __pyx_t_12+=1) {
      __pyx_v_j = __pyx_t_12;

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":180
 *             # counter += 1
 *             # print(f"the value of j is {j}")
 *             maximum = 0             # <<<<<<<<<<<<<<
 *             j += 1
 *             # print("i {}, j {}".format(i, j))
 */
      __pyx_v_maximum = 0;

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":181
 *             # print(f"the value of j is {j}")
 *             maximum = 0
 *             j += 1             # <<<<<<<<<<<<<<
 *             # print("i {}, j {}".format(i, j))
 *             """
 */
      __pyx_v_j = (__pyx_v_j + 1);

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":196
 *             smaller than j because of the topological sorting
 *             """
 *             in_nodes.clear()             # <<<<<<<<<<<<<<
 *             in_nodes_size = 0
 * 
 */
      __pyx_v_in_nodes.clear();

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":197
 *             """
 *             in_nodes.clear()
 *             in_nodes_size = 0             # <<<<<<<<<<<<<<
 * 
 *             current_node_id = j_node[j - 1]  # which node corresponds to the current j
 */
      __pyx_v_in_nodes_size = 0;

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":199
 *             in_nodes_size = 0
 * 
 *             current_node_id = j_node[j - 1]  # which node corresponds to the current j             # <<<<<<<<<<<<<<
 *             current_node_pos = j_pos[j - 1]  # where in that node am I
 *             if current_node_pos == 0:  # we are at a new node
 */
      __pyx_v_current_node_id = (__pyx_v_j_node[(__pyx_v_j - 1)]);

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":200
 * 
 *             current_node_id = j_node[j - 1]  # which node corresponds to the current j
 *             current_node_pos = j_pos[j - 1]  # where in that node am I             # <<<<<<<<<<<<<<
 *             if current_node_pos == 0:  # we are at a new node
 *                 which_node += 1
 */
      __pyx_v_current_node_pos = (__pyx_v_j_pos[(__pyx_v_j - 1)]);

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":201
 *             current_node_id = j_node[j - 1]  # which node corresponds to the current j
 *             current_node_pos = j_pos[j - 1]  # where in that node am I
 *             if current_node_pos == 0:  # we are at a new node             # <<<<<<<<<<<<<<
 *                 which_node += 1
 * 
 */
      __pyx_t_13 = ((__pyx_v_current_node_pos == 0) != 0);
      if (__pyx_t_13) {

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":202
 *             current_node_pos = j_pos[j - 1]  # where in that node am I
 *             if current_node_pos == 0:  # we are at a new node
 *                 which_node += 1             # <<<<<<<<<<<<<<
 * 
 *             for l in range(intervals[which_node], intervals[which_node + 1]):
 */
        __pyx_v_which_node = (__pyx_v_which_node + 1);

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":201
 *             current_node_id = j_node[j - 1]  # which node corresponds to the current j
 *             current_node_pos = j_pos[j - 1]  # where in that node am I
 *             if current_node_pos == 0:  # we are at a new node             # <<<<<<<<<<<<<<
 *                 which_node += 1
 * 
 */
      }

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":204
 *                 which_node += 1
 * 
 *             for l in range(intervals[which_node], intervals[which_node + 1]):             # <<<<<<<<<<<<<<
 *                 in_nodes.push_back(in_nodes_vec[l])
 *             in_nodes_size = in_nodes.size()
 */
      __pyx_t_14 = (__pyx_v_intervals[(__pyx_v_which_node + 1)]);
      __pyx_t_15 = __pyx_t_14;
      for (__pyx_t_16 = (__pyx_v_intervals[__pyx_v_which_node]); __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
        __pyx_v_l = __pyx_t_16;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":205
 * 
 *             for l in range(intervals[which_node], intervals[which_node + 1]):
 *                 in_nodes.push_back(in_nodes_vec[l])             # <<<<<<<<<<<<<<
 *             in_nodes_size = in_nodes.size()
 * 
 */
        try {
          __pyx_v_in_nodes.push_back((__pyx_v_in_nodes_vec[__pyx_v_l]));
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 205, __pyx_L1_error)
        }
      }

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":206
 *             for l in range(intervals[which_node], intervals[which_node + 1]):
 *                 in_nodes.push_back(in_nodes_vec[l])
 *             in_nodes_size = in_nodes.size()             # <<<<<<<<<<<<<<
 * 
 *             # print(f"i {i}, j {j}, current_node {current_node_id}, current_node_pos {current_node_pos}, in_nodes {in_nodes}")
 */
      __pyx_v_in_nodes_size = __pyx_v_in_nodes.size();

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":210
 *             # print(f"i {i}, j {j}, current_node {current_node_id}, current_node_pos {current_node_pos}, in_nodes {in_nodes}")
 *             # 1 and 2 situation
 *             if (current_node_pos != 0) or (current_node_pos == 0 and in_nodes_size == 0):             # <<<<<<<<<<<<<<
 *                 # if (current_node_pos != 0) or :
 * 
 */
      __pyx_t_17 = ((__pyx_v_current_node_pos != 0) != 0);
      if (!__pyx_t_17) {
      } else {
        __pyx_t_13 = __pyx_t_17;
        goto __pyx_L17_bool_binop_done;
      }
      __pyx_t_17 = ((__pyx_v_current_node_pos == 0) != 0);
      if (__pyx_t_17) {
      } else {
        __pyx_t_13 = __pyx_t_17;
        goto __pyx_L17_bool_binop_done;
      }
      __pyx_t_17 = ((__pyx_v_in_nodes_size == 0) != 0);
      __pyx_t_13 = __pyx_t_17;
      __pyx_L17_bool_binop_done:;
      if (__pyx_t_13) {

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":213
 *                 # if (current_node_pos != 0) or :
 * 
 *                 current_cell = row + j             # <<<<<<<<<<<<<<
 *                 left_cell = current_cell - 1
 *                 above_cell = current_cell - (graph_seq_len + 1) * 3
 */
        __pyx_v_current_cell = (__pyx_v_row + __pyx_v_j);

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":214
 * 
 *                 current_cell = row + j
 *                 left_cell = current_cell - 1             # <<<<<<<<<<<<<<
 *                 above_cell = current_cell - (graph_seq_len + 1) * 3
 *                 diagonal_cell = above_cell - 1
 */
        __pyx_v_left_cell = (__pyx_v_current_cell - 1);

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":215
 *                 current_cell = row + j
 *                 left_cell = current_cell - 1
 *                 above_cell = current_cell - (graph_seq_len + 1) * 3             # <<<<<<<<<<<<<<
 *                 diagonal_cell = above_cell - 1
 * 
 */
        __pyx_v_above_cell = (__pyx_v_current_cell - ((__pyx_v_graph_seq_len + 1) * 3));

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":216
 *                 left_cell = current_cell - 1
 *                 above_cell = current_cell - (graph_seq_len + 1) * 3
 *                 diagonal_cell = above_cell - 1             # <<<<<<<<<<<<<<
 * 
 *                 # framshift jumps
 */
        __pyx_v_diagonal_cell = (__pyx_v_above_cell - 1);

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":219
 * 
 *                 # framshift jumps
 *                 diagonal_insertion = current_cell - (graph_seq_len + 1) * 4 - 1             # <<<<<<<<<<<<<<
 *                 diagonal_deletion = current_cell - (graph_seq_len + 1) * 2 - 1
 * 
 */
        __pyx_v_diagonal_insertion = ((__pyx_v_current_cell - ((__pyx_v_graph_seq_len + 1) * 4)) - 1);

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":220
 *                 # framshift jumps
 *                 diagonal_insertion = current_cell - (graph_seq_len + 1) * 4 - 1
 *                 diagonal_deletion = current_cell - (graph_seq_len + 1) * 2 - 1             # <<<<<<<<<<<<<<
 * 
 *                 """
 */
        __pyx_v_diagonal_deletion = ((__pyx_v_current_cell - ((__pyx_v_graph_seq_len + 1) * 2)) - 1);

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":233
 *                 # print(f"We are at cell {current_cell} with coords of {i},{j} with left_cell {left_cell}, above_cell {above_cell} and diagonal is {diagonal_cell}, fs deletion is {diagonal_deletion} and fs insertion is {diagonal_insertion}")
 *                 # print(f"We are at codon {chr(codon + 65)} and target is {chr(all_seq_as_int[j-1] + 65)}, and the score is {sub_matrix[codon * 27 + all_seq_as_int[j - 1]]}")
 *                 if codon == all_seq_as_int[j - 1]:             # <<<<<<<<<<<<<<
 *                     match_miss = dp_table[diagonal_cell] + 2
 *                 else:
 */
        __pyx_t_13 = ((__pyx_v_codon == (__pyx_v_all_seq_as_int[(__pyx_v_j - 1)])) != 0);
        if (__pyx_t_13) {

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":234
 *                 # print(f"We are at codon {chr(codon + 65)} and target is {chr(all_seq_as_int[j-1] + 65)}, and the score is {sub_matrix[codon * 27 + all_seq_as_int[j - 1]]}")
 *                 if codon == all_seq_as_int[j - 1]:
 *                     match_miss = dp_table[diagonal_cell] + 2             # <<<<<<<<<<<<<<
 *                 else:
 *                     match_miss = dp_table[diagonal_cell] + 0
 */
          __pyx_v_match_miss = ((__pyx_v_dp_table[__pyx_v_diagonal_cell]) + 2);

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":233
 *                 # print(f"We are at cell {current_cell} with coords of {i},{j} with left_cell {left_cell}, above_cell {above_cell} and diagonal is {diagonal_cell}, fs deletion is {diagonal_deletion} and fs insertion is {diagonal_insertion}")
 *                 # print(f"We are at codon {chr(codon + 65)} and target is {chr(all_seq_as_int[j-1] + 65)}, and the score is {sub_matrix[codon * 27 + all_seq_as_int[j - 1]]}")
 *                 if codon == all_seq_as_int[j - 1]:             # <<<<<<<<<<<<<<
 *                     match_miss = dp_table[diagonal_cell] + 2
 *                 else:
 */
          goto __pyx_L20;
        }

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":236
 *                     match_miss = dp_table[diagonal_cell] + 2
 *                 else:
 *                     match_miss = dp_table[diagonal_cell] + 0             # <<<<<<<<<<<<<<
 *                 # match_miss = dp_table[diagonal_cell] + sub_matrix[codon * 27 + all_seq_as_int[j - 1]]
 * 
 */
        /*else*/ {
          __pyx_v_match_miss = ((__pyx_v_dp_table[__pyx_v_diagonal_cell]) + 0);
        }
        __pyx_L20:;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":239
 *                 # match_miss = dp_table[diagonal_cell] + sub_matrix[codon * 27 + all_seq_as_int[j - 1]]
 * 
 *                 deletion = dp_table[left_cell] + gap_score             # <<<<<<<<<<<<<<
 *                 insertion = dp_table[above_cell] + gap_score
 *                 fs_deletion = dp_table[diagonal_deletion] + fs_score
 */
        __pyx_v_deletion = ((__pyx_v_dp_table[__pyx_v_left_cell]) + __pyx_v_gap_score);

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":240
 * 
 *                 deletion = dp_table[left_cell] + gap_score
 *                 insertion = dp_table[above_cell] + gap_score             # <<<<<<<<<<<<<<
 *                 fs_deletion = dp_table[diagonal_deletion] + fs_score
 *                 fs_insertion = dp_table[diagonal_insertion] + fs_score
 */
        __pyx_v_insertion = ((__pyx_v_dp_table[__pyx_v_above_cell]) + __pyx_v_gap_score);

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":241
 *                 deletion = dp_table[left_cell] + gap_score
 *                 insertion = dp_table[above_cell] + gap_score
 *                 fs_deletion = dp_table[diagonal_deletion] + fs_score             # <<<<<<<<<<<<<<
 *                 fs_insertion = dp_table[diagonal_insertion] + fs_score
 * 
 */
        __pyx_v_fs_deletion = ((__pyx_v_dp_table[__pyx_v_diagonal_deletion]) + __pyx_v_fs_score);

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":242
 *                 insertion = dp_table[above_cell] + gap_score
 *                 fs_deletion = dp_table[diagonal_deletion] + fs_score
 *                 fs_insertion = dp_table[diagonal_insertion] + fs_score             # <<<<<<<<<<<<<<
 * 
 *                 local_max = max(match_miss, deletion, insertion, fs_deletion, fs_insertion, 0)
 */
        __pyx_v_fs_insertion = ((__pyx_v_dp_table[__pyx_v_diagonal_insertion]) + __pyx_v_fs_score);

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":244
 *                 fs_insertion = dp_table[diagonal_insertion] + fs_score
 * 
 *                 local_max = max(match_miss, deletion, insertion, fs_deletion, fs_insertion, 0)             # <<<<<<<<<<<<<<
 * 
 *                 if local_max == match_miss:
 */
        __pyx_t_14 = __pyx_v_deletion;
        __pyx_t_15 = __pyx_v_insertion;
        __pyx_t_16 = __pyx_v_fs_deletion;
        __pyx_t_18 = __pyx_v_fs_insertion;
        __pyx_t_19 = 0;
        __pyx_t_20 = __pyx_v_match_miss;
        if (((__pyx_t_14 > __pyx_t_20) != 0)) {
          __pyx_t_21 = __pyx_t_14;
        } else {
          __pyx_t_21 = __pyx_t_20;
        }
        __pyx_t_20 = __pyx_t_21;
        if (((__pyx_t_15 > __pyx_t_20) != 0)) {
          __pyx_t_21 = __pyx_t_15;
        } else {
          __pyx_t_21 = __pyx_t_20;
        }
        __pyx_t_20 = __pyx_t_21;
        if (((__pyx_t_16 > __pyx_t_20) != 0)) {
          __pyx_t_21 = __pyx_t_16;
        } else {
          __pyx_t_21 = __pyx_t_20;
        }
        __pyx_t_20 = __pyx_t_21;
        if (((__pyx_t_18 > __pyx_t_20) != 0)) {
          __pyx_t_21 = __pyx_t_18;
        } else {
          __pyx_t_21 = __pyx_t_20;
        }
        __pyx_t_20 = __pyx_t_21;
        if (((__pyx_t_19 > __pyx_t_20) != 0)) {
          __pyx_t_22 = __pyx_t_19;
        } else {
          __pyx_t_22 = __pyx_t_20;
        }
        __pyx_v_local_max = __pyx_t_22;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":246
 *                 local_max = max(match_miss, deletion, insertion, fs_deletion, fs_insertion, 0)
 * 
 *                 if local_max == match_miss:             # <<<<<<<<<<<<<<
 *                     traceback_table[current_cell] = diagonal_cell
 *                 elif local_max == deletion:
 */
        __pyx_t_13 = ((__pyx_v_local_max == __pyx_v_match_miss) != 0);
        if (__pyx_t_13) {

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":247
 * 
 *                 if local_max == match_miss:
 *                     traceback_table[current_cell] = diagonal_cell             # <<<<<<<<<<<<<<
 *                 elif local_max == deletion:
 *                     traceback_table[current_cell] = left_cell
 */
          (__pyx_v_traceback_table[__pyx_v_current_cell]) = __pyx_v_diagonal_cell;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":246
 *                 local_max = max(match_miss, deletion, insertion, fs_deletion, fs_insertion, 0)
 * 
 *                 if local_max == match_miss:             # <<<<<<<<<<<<<<
 *                     traceback_table[current_cell] = diagonal_cell
 *                 elif local_max == deletion:
 */
          goto __pyx_L21;
        }

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":248
 *                 if local_max == match_miss:
 *                     traceback_table[current_cell] = diagonal_cell
 *                 elif local_max == deletion:             # <<<<<<<<<<<<<<
 *                     traceback_table[current_cell] = left_cell
 *                 elif local_max == insertion:
 */
        __pyx_t_13 = ((__pyx_v_local_max == __pyx_v_deletion) != 0);
        if (__pyx_t_13) {

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":249
 *                     traceback_table[current_cell] = diagonal_cell
 *                 elif local_max == deletion:
 *                     traceback_table[current_cell] = left_cell             # <<<<<<<<<<<<<<
 *                 elif local_max == insertion:
 *                     traceback_table[current_cell] = above_cell
 */
          (__pyx_v_traceback_table[__pyx_v_current_cell]) = __pyx_v_left_cell;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":248
 *                 if local_max == match_miss:
 *                     traceback_table[current_cell] = diagonal_cell
 *                 elif local_max == deletion:             # <<<<<<<<<<<<<<
 *                     traceback_table[current_cell] = left_cell
 *                 elif local_max == insertion:
 */
          goto __pyx_L21;
        }

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":250
 *                 elif local_max == deletion:
 *                     traceback_table[current_cell] = left_cell
 *                 elif local_max == insertion:             # <<<<<<<<<<<<<<
 *                     traceback_table[current_cell] = above_cell
 *                 elif local_max == fs_deletion:
 */
        __pyx_t_13 = ((__pyx_v_local_max == __pyx_v_insertion) != 0);
        if (__pyx_t_13) {

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":251
 *                     traceback_table[current_cell] = left_cell
 *                 elif local_max == insertion:
 *                     traceback_table[current_cell] = above_cell             # <<<<<<<<<<<<<<
 *                 elif local_max == fs_deletion:
 *                     # print(f"I am in diagonal deletion at {current_cell} and taking from {diagonal_deletion}")
 */
          (__pyx_v_traceback_table[__pyx_v_current_cell]) = __pyx_v_above_cell;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":250
 *                 elif local_max == deletion:
 *                     traceback_table[current_cell] = left_cell
 *                 elif local_max == insertion:             # <<<<<<<<<<<<<<
 *                     traceback_table[current_cell] = above_cell
 *                 elif local_max == fs_deletion:
 */
          goto __pyx_L21;
        }

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":252
 *                 elif local_max == insertion:
 *                     traceback_table[current_cell] = above_cell
 *                 elif local_max == fs_deletion:             # <<<<<<<<<<<<<<
 *                     # print(f"I am in diagonal deletion at {current_cell} and taking from {diagonal_deletion}")
 *                     traceback_table[current_cell] = diagonal_deletion
 */
        __pyx_t_13 = ((__pyx_v_local_max == __pyx_v_fs_deletion) != 0);
        if (__pyx_t_13) {

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":254
 *                 elif local_max == fs_deletion:
 *                     # print(f"I am in diagonal deletion at {current_cell} and taking from {diagonal_deletion}")
 *                     traceback_table[current_cell] = diagonal_deletion             # <<<<<<<<<<<<<<
 *                 elif local_max == fs_insertion:
 *                     # print(f"I am in diagonal insertion at {current_cell} and taking from {diagonal_deletion}")
 */
          (__pyx_v_traceback_table[__pyx_v_current_cell]) = __pyx_v_diagonal_deletion;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":252
 *                 elif local_max == insertion:
 *                     traceback_table[current_cell] = above_cell
 *                 elif local_max == fs_deletion:             # <<<<<<<<<<<<<<
 *                     # print(f"I am in diagonal deletion at {current_cell} and taking from {diagonal_deletion}")
 *                     traceback_table[current_cell] = diagonal_deletion
 */
          goto __pyx_L21;
        }

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":255
 *                     # print(f"I am in diagonal deletion at {current_cell} and taking from {diagonal_deletion}")
 *                     traceback_table[current_cell] = diagonal_deletion
 *                 elif local_max == fs_insertion:             # <<<<<<<<<<<<<<
 *                     # print(f"I am in diagonal insertion at {current_cell} and taking from {diagonal_deletion}")
 *                     traceback_table[current_cell] = diagonal_insertion
 */
        __pyx_t_13 = ((__pyx_v_local_max == __pyx_v_fs_insertion) != 0);
        if (__pyx_t_13) {

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":257
 *                 elif local_max == fs_insertion:
 *                     # print(f"I am in diagonal insertion at {current_cell} and taking from {diagonal_deletion}")
 *                     traceback_table[current_cell] = diagonal_insertion             # <<<<<<<<<<<<<<
 * 
 *                 # print(f"the local max is {local_max}")
 */
          (__pyx_v_traceback_table[__pyx_v_current_cell]) = __pyx_v_diagonal_insertion;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":255
 *                     # print(f"I am in diagonal deletion at {current_cell} and taking from {diagonal_deletion}")
 *                     traceback_table[current_cell] = diagonal_deletion
 *                 elif local_max == fs_insertion:             # <<<<<<<<<<<<<<
 *                     # print(f"I am in diagonal insertion at {current_cell} and taking from {diagonal_deletion}")
 *                     traceback_table[current_cell] = diagonal_insertion
 */
        }
        __pyx_L21:;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":260
 * 
 *                 # print(f"the local max is {local_max}")
 *                 dp_table[current_cell] = local_max             # <<<<<<<<<<<<<<
 * 
 * 
 */
        (__pyx_v_dp_table[__pyx_v_current_cell]) = __pyx_v_local_max;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":210
 *             # print(f"i {i}, j {j}, current_node {current_node_id}, current_node_pos {current_node_pos}, in_nodes {in_nodes}")
 *             # 1 and 2 situation
 *             if (current_node_pos != 0) or (current_node_pos == 0 and in_nodes_size == 0):             # <<<<<<<<<<<<<<
 *                 # if (current_node_pos != 0) or :
 * 
 */
        goto __pyx_L16;
      }

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":264
 * 
 *             # situation 3
 *             elif (current_node_pos == 0) and (in_nodes_size != 0):             # <<<<<<<<<<<<<<
 * 
 *                 # if in_nodes_size != 0:
 */
      __pyx_t_17 = ((__pyx_v_current_node_pos == 0) != 0);
      if (__pyx_t_17) {
      } else {
        __pyx_t_13 = __pyx_t_17;
        goto __pyx_L22_bool_binop_done;
      }
      __pyx_t_17 = ((__pyx_v_in_nodes_size != 0) != 0);
      __pyx_t_13 = __pyx_t_17;
      __pyx_L22_bool_binop_done:;
      if (__pyx_t_13) {

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":269
 * 
 *                 # for in nodes I only need to choose one so coord is an integer and not a vector like the global max
 *                 in_nodes_max = 0             # <<<<<<<<<<<<<<
 *                 in_nodes_max_coord = 0
 * 
 */
        __pyx_v_in_nodes_max = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":270
 *                 # for in nodes I only need to choose one so coord is an integer and not a vector like the global max
 *                 in_nodes_max = 0
 *                 in_nodes_max_coord = 0             # <<<<<<<<<<<<<<
 * 
 *                 """
 */
        __pyx_v_in_nodes_max_coord = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":277
 *                 therefore, can only need to be calculated once before looping through all incoming edges
 *                 """
 *                 current_cell = row + j             # <<<<<<<<<<<<<<
 *                 above_cell = current_cell - (graph_seq_len + 1) * 3
 * 
 */
        __pyx_v_current_cell = (__pyx_v_row + __pyx_v_j);

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":278
 *                 """
 *                 current_cell = row + j
 *                 above_cell = current_cell - (graph_seq_len + 1) * 3             # <<<<<<<<<<<<<<
 * 
 *                 insertion = dp_table[above_cell] + gap_score
 */
        __pyx_v_above_cell = (__pyx_v_current_cell - ((__pyx_v_graph_seq_len + 1) * 3));

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":280
 *                 above_cell = current_cell - (graph_seq_len + 1) * 3
 * 
 *                 insertion = dp_table[above_cell] + gap_score             # <<<<<<<<<<<<<<
 * 
 *                 for previous_node in in_nodes:
 */
        __pyx_v_insertion = ((__pyx_v_dp_table[__pyx_v_above_cell]) + __pyx_v_gap_score);

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":282
 *                 insertion = dp_table[above_cell] + gap_score
 * 
 *                 for previous_node in in_nodes:             # <<<<<<<<<<<<<<
 * 
 *                     # node_ends tells me where to jump in the dp table
 */
        __pyx_t_23 = __pyx_v_in_nodes.begin();
        for (;;) {
          if (!(__pyx_t_23 != __pyx_v_in_nodes.end())) break;
          __pyx_t_14 = *__pyx_t_23;
          ++__pyx_t_23;
          __pyx_v_previous_node = __pyx_t_14;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":286
 *                     # node_ends tells me where to jump in the dp table
 *                     # so instead of j-1 I get some other previous_j
 *                     previous_j = node_ends[previous_node]             # <<<<<<<<<<<<<<
 * 
 *                     left_cell = row + previous_j
 */
          __pyx_v_previous_j = (__pyx_v_node_ends[__pyx_v_previous_node]);

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":288
 *                     previous_j = node_ends[previous_node]
 * 
 *                     left_cell = row + previous_j             # <<<<<<<<<<<<<<
 *                     diagonal_cell = left_cell - (graph_seq_len + 1) * 3
 *                     # framshift jumps
 */
          __pyx_v_left_cell = (__pyx_v_row + __pyx_v_previous_j);

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":289
 * 
 *                     left_cell = row + previous_j
 *                     diagonal_cell = left_cell - (graph_seq_len + 1) * 3             # <<<<<<<<<<<<<<
 *                     # framshift jumps
 * 
 */
          __pyx_v_diagonal_cell = (__pyx_v_left_cell - ((__pyx_v_graph_seq_len + 1) * 3));

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":292
 *                     # framshift jumps
 * 
 *                     diagonal_insertion = left_cell - (graph_seq_len + 1) * 4             # <<<<<<<<<<<<<<
 *                     diagonal_deletion = left_cell - (graph_seq_len + 1) * 2
 * 
 */
          __pyx_v_diagonal_insertion = (__pyx_v_left_cell - ((__pyx_v_graph_seq_len + 1) * 4));

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":293
 * 
 *                     diagonal_insertion = left_cell - (graph_seq_len + 1) * 4
 *                     diagonal_deletion = left_cell - (graph_seq_len + 1) * 2             # <<<<<<<<<<<<<<
 * 
 *                     # print(f"we are at row {i} and column {j}")
 */
          __pyx_v_diagonal_deletion = (__pyx_v_left_cell - ((__pyx_v_graph_seq_len + 1) * 2));

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":297
 *                     # print(f"we are at row {i} and column {j}")
 *                     # print(f"We are at codon {chr(codon + 65)} and target is {chr(all_seq_as_int[j-1] + 65)}, and the score is {sub_matrix[codon * 27 + all_seq_as_int[j - 1]]}")
 *                     if codon == all_seq_as_int[j - 1]:             # <<<<<<<<<<<<<<
 *                         match_miss = dp_table[diagonal_cell] + 2
 *                     else:
 */
          __pyx_t_13 = ((__pyx_v_codon == (__pyx_v_all_seq_as_int[(__pyx_v_j - 1)])) != 0);
          if (__pyx_t_13) {

            /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":298
 *                     # print(f"We are at codon {chr(codon + 65)} and target is {chr(all_seq_as_int[j-1] + 65)}, and the score is {sub_matrix[codon * 27 + all_seq_as_int[j - 1]]}")
 *                     if codon == all_seq_as_int[j - 1]:
 *                         match_miss = dp_table[diagonal_cell] + 2             # <<<<<<<<<<<<<<
 *                     else:
 *                         match_miss = dp_table[diagonal_cell] + 0
 */
            __pyx_v_match_miss = ((__pyx_v_dp_table[__pyx_v_diagonal_cell]) + 2);

            /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":297
 *                     # print(f"we are at row {i} and column {j}")
 *                     # print(f"We are at codon {chr(codon + 65)} and target is {chr(all_seq_as_int[j-1] + 65)}, and the score is {sub_matrix[codon * 27 + all_seq_as_int[j - 1]]}")
 *                     if codon == all_seq_as_int[j - 1]:             # <<<<<<<<<<<<<<
 *                         match_miss = dp_table[diagonal_cell] + 2
 *                     else:
 */
            goto __pyx_L26;
          }

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":300
 *                         match_miss = dp_table[diagonal_cell] + 2
 *                     else:
 *                         match_miss = dp_table[diagonal_cell] + 0             # <<<<<<<<<<<<<<
 *                     # match_miss = dp_table[diagonal_cell] + sub_matrix[codon * 27 + all_seq_as_int[j - 1]]
 *                     #
 */
          /*else*/ {
            __pyx_v_match_miss = ((__pyx_v_dp_table[__pyx_v_diagonal_cell]) + 0);
          }
          __pyx_L26:;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":306
 *                     #       sub_matrix[read_as_int[i-1] + all_seq_as_int[j-1]], in_nodes_size)
 * 
 *                     deletion = dp_table[left_cell] + gap_score             # <<<<<<<<<<<<<<
 *                     fs_deletion = dp_table[diagonal_deletion] + fs_score
 *                     fs_insertion = dp_table[diagonal_insertion] + fs_score
 */
          __pyx_v_deletion = ((__pyx_v_dp_table[__pyx_v_left_cell]) + __pyx_v_gap_score);

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":307
 * 
 *                     deletion = dp_table[left_cell] + gap_score
 *                     fs_deletion = dp_table[diagonal_deletion] + fs_score             # <<<<<<<<<<<<<<
 *                     fs_insertion = dp_table[diagonal_insertion] + fs_score
 * 
 */
          __pyx_v_fs_deletion = ((__pyx_v_dp_table[__pyx_v_diagonal_deletion]) + __pyx_v_fs_score);

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":308
 *                     deletion = dp_table[left_cell] + gap_score
 *                     fs_deletion = dp_table[diagonal_deletion] + fs_score
 *                     fs_insertion = dp_table[diagonal_insertion] + fs_score             # <<<<<<<<<<<<<<
 * 
 *                     # updating in_nodes_max which will tell me which jump had the best score
 */
          __pyx_v_fs_insertion = ((__pyx_v_dp_table[__pyx_v_diagonal_insertion]) + __pyx_v_fs_score);

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":311
 * 
 *                     # updating in_nodes_max which will tell me which jump had the best score
 *                     local_max = max(match_miss, deletion, insertion, fs_deletion, fs_insertion, 0)             # <<<<<<<<<<<<<<
 *                     if local_max > in_nodes_max:
 *                         if local_max == match_miss:
 */
          __pyx_t_14 = __pyx_v_deletion;
          __pyx_t_15 = __pyx_v_insertion;
          __pyx_t_16 = __pyx_v_fs_deletion;
          __pyx_t_18 = __pyx_v_fs_insertion;
          __pyx_t_22 = 0;
          __pyx_t_20 = __pyx_v_match_miss;
          if (((__pyx_t_14 > __pyx_t_20) != 0)) {
            __pyx_t_21 = __pyx_t_14;
          } else {
            __pyx_t_21 = __pyx_t_20;
          }
          __pyx_t_20 = __pyx_t_21;
          if (((__pyx_t_15 > __pyx_t_20) != 0)) {
            __pyx_t_21 = __pyx_t_15;
          } else {
            __pyx_t_21 = __pyx_t_20;
          }
          __pyx_t_20 = __pyx_t_21;
          if (((__pyx_t_16 > __pyx_t_20) != 0)) {
            __pyx_t_21 = __pyx_t_16;
          } else {
            __pyx_t_21 = __pyx_t_20;
          }
          __pyx_t_20 = __pyx_t_21;
          if (((__pyx_t_18 > __pyx_t_20) != 0)) {
            __pyx_t_21 = __pyx_t_18;
          } else {
            __pyx_t_21 = __pyx_t_20;
          }
          __pyx_t_20 = __pyx_t_21;
          if (((__pyx_t_22 > __pyx_t_20) != 0)) {
            __pyx_t_19 = __pyx_t_22;
          } else {
            __pyx_t_19 = __pyx_t_20;
          }
          __pyx_v_local_max = __pyx_t_19;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":312
 *                     # updating in_nodes_max which will tell me which jump had the best score
 *                     local_max = max(match_miss, deletion, insertion, fs_deletion, fs_insertion, 0)
 *                     if local_max > in_nodes_max:             # <<<<<<<<<<<<<<
 *                         if local_max == match_miss:
 *                             in_nodes_max_coord = diagonal_cell
 */
          __pyx_t_13 = ((__pyx_v_local_max > __pyx_v_in_nodes_max) != 0);
          if (__pyx_t_13) {

            /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":313
 *                     local_max = max(match_miss, deletion, insertion, fs_deletion, fs_insertion, 0)
 *                     if local_max > in_nodes_max:
 *                         if local_max == match_miss:             # <<<<<<<<<<<<<<
 *                             in_nodes_max_coord = diagonal_cell
 *                         elif local_max == deletion:
 */
            __pyx_t_13 = ((__pyx_v_local_max == __pyx_v_match_miss) != 0);
            if (__pyx_t_13) {

              /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":314
 *                     if local_max > in_nodes_max:
 *                         if local_max == match_miss:
 *                             in_nodes_max_coord = diagonal_cell             # <<<<<<<<<<<<<<
 *                         elif local_max == deletion:
 *                             in_nodes_max_coord = left_cell
 */
              __pyx_v_in_nodes_max_coord = __pyx_v_diagonal_cell;

              /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":313
 *                     local_max = max(match_miss, deletion, insertion, fs_deletion, fs_insertion, 0)
 *                     if local_max > in_nodes_max:
 *                         if local_max == match_miss:             # <<<<<<<<<<<<<<
 *                             in_nodes_max_coord = diagonal_cell
 *                         elif local_max == deletion:
 */
              goto __pyx_L28;
            }

            /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":315
 *                         if local_max == match_miss:
 *                             in_nodes_max_coord = diagonal_cell
 *                         elif local_max == deletion:             # <<<<<<<<<<<<<<
 *                             in_nodes_max_coord = left_cell
 *                         elif local_max == insertion:
 */
            __pyx_t_13 = ((__pyx_v_local_max == __pyx_v_deletion) != 0);
            if (__pyx_t_13) {

              /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":316
 *                             in_nodes_max_coord = diagonal_cell
 *                         elif local_max == deletion:
 *                             in_nodes_max_coord = left_cell             # <<<<<<<<<<<<<<
 *                         elif local_max == insertion:
 *                             in_nodes_max_coord = above_cell
 */
              __pyx_v_in_nodes_max_coord = __pyx_v_left_cell;

              /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":315
 *                         if local_max == match_miss:
 *                             in_nodes_max_coord = diagonal_cell
 *                         elif local_max == deletion:             # <<<<<<<<<<<<<<
 *                             in_nodes_max_coord = left_cell
 *                         elif local_max == insertion:
 */
              goto __pyx_L28;
            }

            /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":317
 *                         elif local_max == deletion:
 *                             in_nodes_max_coord = left_cell
 *                         elif local_max == insertion:             # <<<<<<<<<<<<<<
 *                             in_nodes_max_coord = above_cell
 *                         elif local_max == fs_deletion:
 */
            __pyx_t_13 = ((__pyx_v_local_max == __pyx_v_insertion) != 0);
            if (__pyx_t_13) {

              /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":318
 *                             in_nodes_max_coord = left_cell
 *                         elif local_max == insertion:
 *                             in_nodes_max_coord = above_cell             # <<<<<<<<<<<<<<
 *                         elif local_max == fs_deletion:
 *                             # print(f"I am in diagonal deletion at row {current_cell // (graph_seq_len + 1)} and column {current_cell % (graph_seq_len + 1)} taking from row {diagonal_deletion // (graph_seq_len + 1)} and column {diagonal_deletion % (graph_seq_len + 1)} with current score {local_max} and previous score {dp_table[diagonal_deletion]}")
 */
              __pyx_v_in_nodes_max_coord = __pyx_v_above_cell;

              /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":317
 *                         elif local_max == deletion:
 *                             in_nodes_max_coord = left_cell
 *                         elif local_max == insertion:             # <<<<<<<<<<<<<<
 *                             in_nodes_max_coord = above_cell
 *                         elif local_max == fs_deletion:
 */
              goto __pyx_L28;
            }

            /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":319
 *                         elif local_max == insertion:
 *                             in_nodes_max_coord = above_cell
 *                         elif local_max == fs_deletion:             # <<<<<<<<<<<<<<
 *                             # print(f"I am in diagonal deletion at row {current_cell // (graph_seq_len + 1)} and column {current_cell % (graph_seq_len + 1)} taking from row {diagonal_deletion // (graph_seq_len + 1)} and column {diagonal_deletion % (graph_seq_len + 1)} with current score {local_max} and previous score {dp_table[diagonal_deletion]}")
 *                             in_nodes_max_coord = diagonal_deletion
 */
            __pyx_t_13 = ((__pyx_v_local_max == __pyx_v_fs_deletion) != 0);
            if (__pyx_t_13) {

              /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":321
 *                         elif local_max == fs_deletion:
 *                             # print(f"I am in diagonal deletion at row {current_cell // (graph_seq_len + 1)} and column {current_cell % (graph_seq_len + 1)} taking from row {diagonal_deletion // (graph_seq_len + 1)} and column {diagonal_deletion % (graph_seq_len + 1)} with current score {local_max} and previous score {dp_table[diagonal_deletion]}")
 *                             in_nodes_max_coord = diagonal_deletion             # <<<<<<<<<<<<<<
 *                         elif local_max == fs_insertion:
 *                             # print(f"I am in diagonal insertion at row {current_cell // (graph_seq_len + 1)} and column {current_cell % (graph_seq_len + 1)} taking from row {diagonal_deletion // (graph_seq_len + 1)} and column {diagonal_deletion % (graph_seq_len + 1)} with current score {local_max} and previous score {dp_table[diagonal_deletion]}")
 */
              __pyx_v_in_nodes_max_coord = __pyx_v_diagonal_deletion;

              /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":319
 *                         elif local_max == insertion:
 *                             in_nodes_max_coord = above_cell
 *                         elif local_max == fs_deletion:             # <<<<<<<<<<<<<<
 *                             # print(f"I am in diagonal deletion at row {current_cell // (graph_seq_len + 1)} and column {current_cell % (graph_seq_len + 1)} taking from row {diagonal_deletion // (graph_seq_len + 1)} and column {diagonal_deletion % (graph_seq_len + 1)} with current score {local_max} and previous score {dp_table[diagonal_deletion]}")
 *                             in_nodes_max_coord = diagonal_deletion
 */
              goto __pyx_L28;
            }

            /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":322
 *                             # print(f"I am in diagonal deletion at row {current_cell // (graph_seq_len + 1)} and column {current_cell % (graph_seq_len + 1)} taking from row {diagonal_deletion // (graph_seq_len + 1)} and column {diagonal_deletion % (graph_seq_len + 1)} with current score {local_max} and previous score {dp_table[diagonal_deletion]}")
 *                             in_nodes_max_coord = diagonal_deletion
 *                         elif local_max == fs_insertion:             # <<<<<<<<<<<<<<
 *                             # print(f"I am in diagonal insertion at row {current_cell // (graph_seq_len + 1)} and column {current_cell % (graph_seq_len + 1)} taking from row {diagonal_deletion // (graph_seq_len + 1)} and column {diagonal_deletion % (graph_seq_len + 1)} with current score {local_max} and previous score {dp_table[diagonal_deletion]}")
 *                             in_nodes_max_coord = diagonal_insertion
 */
            __pyx_t_13 = ((__pyx_v_local_max == __pyx_v_fs_insertion) != 0);
            if (__pyx_t_13) {

              /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":324
 *                         elif local_max == fs_insertion:
 *                             # print(f"I am in diagonal insertion at row {current_cell // (graph_seq_len + 1)} and column {current_cell % (graph_seq_len + 1)} taking from row {diagonal_deletion // (graph_seq_len + 1)} and column {diagonal_deletion % (graph_seq_len + 1)} with current score {local_max} and previous score {dp_table[diagonal_deletion]}")
 *                             in_nodes_max_coord = diagonal_insertion             # <<<<<<<<<<<<<<
 *                         # print(f"{current_cell}, {local_max}, {in_nodes_max_coord}")
 * 
 */
              __pyx_v_in_nodes_max_coord = __pyx_v_diagonal_insertion;

              /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":322
 *                             # print(f"I am in diagonal deletion at row {current_cell // (graph_seq_len + 1)} and column {current_cell % (graph_seq_len + 1)} taking from row {diagonal_deletion // (graph_seq_len + 1)} and column {diagonal_deletion % (graph_seq_len + 1)} with current score {local_max} and previous score {dp_table[diagonal_deletion]}")
 *                             in_nodes_max_coord = diagonal_deletion
 *                         elif local_max == fs_insertion:             # <<<<<<<<<<<<<<
 *                             # print(f"I am in diagonal insertion at row {current_cell // (graph_seq_len + 1)} and column {current_cell % (graph_seq_len + 1)} taking from row {diagonal_deletion // (graph_seq_len + 1)} and column {diagonal_deletion % (graph_seq_len + 1)} with current score {local_max} and previous score {dp_table[diagonal_deletion]}")
 *                             in_nodes_max_coord = diagonal_insertion
 */
            }
            __pyx_L28:;

            /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":339
 *                         #         in_nodes_max_coord = above_cell
 * 
 *                         in_nodes_max = local_max             # <<<<<<<<<<<<<<
 *                     # print(f"We are at {current_cell} and the previous j is {previous_j}, the local_max is {local_max} and the coordinates of it is {in_nodes_max_coord}, diagonal is at {diagonal_cell}, and fs deletion {diagonal_deletion} and fs insertion {diagonal_insertion}")
 *                     # print(i, j, current_cell, left_cell, above_cell, diagonal_cell, local_max)
 */
            __pyx_v_in_nodes_max = __pyx_v_local_max;

            /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":312
 *                     # updating in_nodes_max which will tell me which jump had the best score
 *                     local_max = max(match_miss, deletion, insertion, fs_deletion, fs_insertion, 0)
 *                     if local_max > in_nodes_max:             # <<<<<<<<<<<<<<
 *                         if local_max == match_miss:
 *                             in_nodes_max_coord = diagonal_cell
 */
          }

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":282
 *                 insertion = dp_table[above_cell] + gap_score
 * 
 *                 for previous_node in in_nodes:             # <<<<<<<<<<<<<<
 * 
 *                     # node_ends tells me where to jump in the dp table
 */
        }

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":350
 *                 #     global_max_coord.push_back(current_cell)
 * 
 *                 traceback_table[current_cell] = in_nodes_max_coord             # <<<<<<<<<<<<<<
 *                 dp_table[current_cell] = in_nodes_max
 * 
 */
        (__pyx_v_traceback_table[__pyx_v_current_cell]) = __pyx_v_in_nodes_max_coord;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":351
 * 
 *                 traceback_table[current_cell] = in_nodes_max_coord
 *                 dp_table[current_cell] = in_nodes_max             # <<<<<<<<<<<<<<
 * 
 *     # print(counter)
 */
        (__pyx_v_dp_table[__pyx_v_current_cell]) = __pyx_v_in_nodes_max;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":264
 * 
 *             # situation 3
 *             elif (current_node_pos == 0) and (in_nodes_size != 0):             # <<<<<<<<<<<<<<
 * 
 *                 # if in_nodes_size != 0:
 */
      }
      __pyx_L16:;
    }
  }

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":354
 * 
 *     # print(counter)
 *     if print_dp:             # <<<<<<<<<<<<<<
 *         print("This is the dp table\n")
 *         print_dp_table(graph_seq_len, read_len, dp_table, all_seq_as_int, read_as_int)
 */
  __pyx_t_13 = (__pyx_v_print_dp != 0);
  if (__pyx_t_13) {

    /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":355
 *     # print(counter)
 *     if print_dp:
 *         print("This is the dp table\n")             # <<<<<<<<<<<<<<
 *         print_dp_table(graph_seq_len, read_len, dp_table, all_seq_as_int, read_as_int)
 *         # print("This is the traceback table\n")
 */
    __pyx_t_24 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_24);
    __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;

    /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":356
 *     if print_dp:
 *         print("This is the dp table\n")
 *         print_dp_table(graph_seq_len, read_len, dp_table, all_seq_as_int, read_as_int)             # <<<<<<<<<<<<<<
 *         # print("This is the traceback table\n")
 *         # print_dp_table(graph_seq_len, read_len, traceback_table, all_seq_as_int, read_as_int)
 */
    __pyx_f_5PanPA_37graph_smith_waterman_frameshift_aware_print_dp_table(__pyx_v_graph_seq_len, __pyx_v_read_len, __pyx_v_dp_table, __pyx_v_all_seq_as_int, __pyx_v_read_as_int);

    /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":354
 * 
 *     # print(counter)
 *     if print_dp:             # <<<<<<<<<<<<<<
 *         print("This is the dp table\n")
 *         print_dp_table(graph_seq_len, read_len, dp_table, all_seq_as_int, read_as_int)
 */
  }

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":363
 *     ###############################################################################################
 *     # finding the max scores and coordinates in the DP table to traceback these best alignments
 *     for i in range(dimensions):             # <<<<<<<<<<<<<<
 *         # had to add the > 0 check because on rare occasions, if the read being aligned really have nothing matching
 *         # the algorithm for some reason was getting stuck
 */
  __pyx_t_3 = __pyx_v_dimensions;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":366
 *         # had to add the > 0 check because on rare occasions, if the read being aligned really have nothing matching
 *         # the algorithm for some reason was getting stuck
 *         if dp_table[i] > 0:             # <<<<<<<<<<<<<<
 *             if dp_table[i] > global_max:
 *                 global_max = dp_table[i]
 */
    __pyx_t_13 = (((__pyx_v_dp_table[__pyx_v_i]) > 0) != 0);
    if (__pyx_t_13) {

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":367
 *         # the algorithm for some reason was getting stuck
 *         if dp_table[i] > 0:
 *             if dp_table[i] > global_max:             # <<<<<<<<<<<<<<
 *                 global_max = dp_table[i]
 *                 global_max_coord.clear()
 */
      __pyx_t_13 = (((__pyx_v_dp_table[__pyx_v_i]) > __pyx_v_global_max) != 0);
      if (__pyx_t_13) {

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":368
 *         if dp_table[i] > 0:
 *             if dp_table[i] > global_max:
 *                 global_max = dp_table[i]             # <<<<<<<<<<<<<<
 *                 global_max_coord.clear()
 *                 global_max_coord.push_back(i)
 */
        __pyx_v_global_max = (__pyx_v_dp_table[__pyx_v_i]);

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":369
 *             if dp_table[i] > global_max:
 *                 global_max = dp_table[i]
 *                 global_max_coord.clear()             # <<<<<<<<<<<<<<
 *                 global_max_coord.push_back(i)
 *             elif dp_table[i] == global_max:
 */
        __pyx_v_global_max_coord.clear();

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":370
 *                 global_max = dp_table[i]
 *                 global_max_coord.clear()
 *                 global_max_coord.push_back(i)             # <<<<<<<<<<<<<<
 *             elif dp_table[i] == global_max:
 *                 global_max_coord.push_back(i)
 */
        try {
          __pyx_v_global_max_coord.push_back(__pyx_v_i);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 370, __pyx_L1_error)
        }

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":367
 *         # the algorithm for some reason was getting stuck
 *         if dp_table[i] > 0:
 *             if dp_table[i] > global_max:             # <<<<<<<<<<<<<<
 *                 global_max = dp_table[i]
 *                 global_max_coord.clear()
 */
        goto __pyx_L33;
      }

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":371
 *                 global_max_coord.clear()
 *                 global_max_coord.push_back(i)
 *             elif dp_table[i] == global_max:             # <<<<<<<<<<<<<<
 *                 global_max_coord.push_back(i)
 * 
 */
      __pyx_t_13 = (((__pyx_v_dp_table[__pyx_v_i]) == __pyx_v_global_max) != 0);
      if (__pyx_t_13) {

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":372
 *                 global_max_coord.push_back(i)
 *             elif dp_table[i] == global_max:
 *                 global_max_coord.push_back(i)             # <<<<<<<<<<<<<<
 * 
 *     # print(f"The max location in matrix is {global_max_coord} and the score is {global_max}")
 */
        try {
          __pyx_v_global_max_coord.push_back(__pyx_v_i);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(0, 372, __pyx_L1_error)
        }

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":371
 *                 global_max_coord.clear()
 *                 global_max_coord.push_back(i)
 *             elif dp_table[i] == global_max:             # <<<<<<<<<<<<<<
 *                 global_max_coord.push_back(i)
 * 
 */
      }
      __pyx_L33:;

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":366
 *         # had to add the > 0 check because on rare occasions, if the read being aligned really have nothing matching
 *         # the algorithm for some reason was getting stuck
 *         if dp_table[i] > 0:             # <<<<<<<<<<<<<<
 *             if dp_table[i] > global_max:
 *                 global_max = dp_table[i]
 */
    }
  }

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":381
 *     # alignment = []
 *     cdef int traceback_max, back_j, back_i, alignment_len
 *     cdef int test = 0             # <<<<<<<<<<<<<<
 *     cdef float alignment_score
 *     # print(j_node, j_pos)
 */
  __pyx_v_test = 0;

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":385
 *     # print(j_node, j_pos)
 * 
 *     for coord in global_max_coord:             # <<<<<<<<<<<<<<
 *         alignment = Alignment(read_name, read_len, global_max)
 * 
 */
  __pyx_t_23 = __pyx_v_global_max_coord.begin();
  for (;;) {
    if (!(__pyx_t_23 != __pyx_v_global_max_coord.end())) break;
    __pyx_t_3 = *__pyx_t_23;
    ++__pyx_t_23;
    __pyx_v_coord = __pyx_t_3;

    /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":386
 * 
 *     for coord in global_max_coord:
 *         alignment = Alignment(read_name, read_len, global_max)             # <<<<<<<<<<<<<<
 * 
 *         traceback_max = dp_table[coord]
 */
    __pyx_t_24 = __Pyx_PyInt_From_int(__pyx_v_read_len); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 386, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_24);
    __pyx_t_25 = __Pyx_PyInt_From_int(__pyx_v_global_max); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 386, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_25);
    __pyx_t_26 = PyTuple_New(3); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 386, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_26);
    __Pyx_INCREF(__pyx_v_read_name);
    __Pyx_GIVEREF(__pyx_v_read_name);
    PyTuple_SET_ITEM(__pyx_t_26, 0, __pyx_v_read_name);
    __Pyx_GIVEREF(__pyx_t_24);
    PyTuple_SET_ITEM(__pyx_t_26, 1, __pyx_t_24);
    __Pyx_GIVEREF(__pyx_t_25);
    PyTuple_SET_ITEM(__pyx_t_26, 2, __pyx_t_25);
    __pyx_t_24 = 0;
    __pyx_t_25 = 0;
    __pyx_t_25 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_5PanPA_9Alignment_Alignment), __pyx_t_26, NULL); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 386, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_25);
    __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
    __Pyx_XDECREF_SET(__pyx_v_alignment, ((struct __pyx_obj_5PanPA_9Alignment_Alignment *)__pyx_t_25));
    __pyx_t_25 = 0;

    /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":388
 *         alignment = Alignment(read_name, read_len, global_max)
 * 
 *         traceback_max = dp_table[coord]             # <<<<<<<<<<<<<<
 *         i = coord // (graph_seq_len + 1)
 *         j = coord % (graph_seq_len + 1)
 */
    __pyx_v_traceback_max = (__pyx_v_dp_table[__pyx_v_coord]);

    /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":389
 * 
 *         traceback_max = dp_table[coord]
 *         i = coord // (graph_seq_len + 1)             # <<<<<<<<<<<<<<
 *         j = coord % (graph_seq_len + 1)
 * 
 */
    __pyx_v_i = (__pyx_v_coord / (__pyx_v_graph_seq_len + 1));

    /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":390
 *         traceback_max = dp_table[coord]
 *         i = coord // (graph_seq_len + 1)
 *         j = coord % (graph_seq_len + 1)             # <<<<<<<<<<<<<<
 * 
 *         # while not first row or column, and not a 0 score (maybe alignment just ended in the middle)
 */
    __pyx_v_j = (__pyx_v_coord % (__pyx_v_graph_seq_len + 1));

    /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":394
 *         # while not first row or column, and not a 0 score (maybe alignment just ended in the middle)
 *         # while ((i != 0) and (j != 0)) and (dp_table[coord] != 0):
 *         while ((i != 0) and (j != 0)) and (dp_table[coord] != 0):             # <<<<<<<<<<<<<<
 *             # print("current: coord, i, j", coord, i, j)
 * 
 */
    while (1) {
      __pyx_t_17 = ((__pyx_v_i != 0) != 0);
      if (__pyx_t_17) {
      } else {
        __pyx_t_13 = __pyx_t_17;
        goto __pyx_L38_bool_binop_done;
      }
      __pyx_t_17 = ((__pyx_v_j != 0) != 0);
      if (__pyx_t_17) {
      } else {
        __pyx_t_13 = __pyx_t_17;
        goto __pyx_L38_bool_binop_done;
      }
      __pyx_t_17 = (((__pyx_v_dp_table[__pyx_v_coord]) != 0) != 0);
      __pyx_t_13 = __pyx_t_17;
      __pyx_L38_bool_binop_done:;
      if (!__pyx_t_13) break;

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":397
 *             # print("current: coord, i, j", coord, i, j)
 * 
 *             back_coord = traceback_table[coord]             # <<<<<<<<<<<<<<
 *             back_i = back_coord // (graph_seq_len + 1)
 *             back_j = back_coord % (graph_seq_len + 1)
 */
      __pyx_v_back_coord = (__pyx_v_traceback_table[__pyx_v_coord]);

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":398
 * 
 *             back_coord = traceback_table[coord]
 *             back_i = back_coord // (graph_seq_len + 1)             # <<<<<<<<<<<<<<
 *             back_j = back_coord % (graph_seq_len + 1)
 * 
 */
      __pyx_v_back_i = (__pyx_v_back_coord / (__pyx_v_graph_seq_len + 1));

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":399
 *             back_coord = traceback_table[coord]
 *             back_i = back_coord // (graph_seq_len + 1)
 *             back_j = back_coord % (graph_seq_len + 1)             # <<<<<<<<<<<<<<
 * 
 *             # print(f"I am at {i + 2}, {j + 2} and came from {back_i + 2}, {back_j + 2}")
 */
      __pyx_v_back_j = (__pyx_v_back_coord % (__pyx_v_graph_seq_len + 1));

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":404
 *             # print(f"and the graph letter is {chr(all_seq_as_int[j-1] + 65)}")
 *             # print(f"and the codon is {read[i-4] + read[i-3] + read[i-2]}")
 *             if back_j == j:  # insertion             # <<<<<<<<<<<<<<
 *                 # print("insertion")
 *                 # add - to target
 */
      __pyx_t_13 = ((__pyx_v_back_j == __pyx_v_j) != 0);
      if (__pyx_t_13) {

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":408
 *                 # add - to target
 *                 # read pos is i - 4 because I want to position to represent the beginning of the codon
 *                 alignment.info.append(             # <<<<<<<<<<<<<<
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": "_", "read_pos": i - 2,
 *                      "read_str": read[i - 2], "type": 0})
 */
        if (unlikely(__pyx_v_alignment->info == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
          __PYX_ERR(0, 408, __pyx_L1_error)
        }

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":409
 *                 # read pos is i - 4 because I want to position to represent the beginning of the codon
 *                 alignment.info.append(
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": "_", "read_pos": i - 2,             # <<<<<<<<<<<<<<
 *                      "read_str": read[i - 2], "type": 0})
 *                 alignment.info.append(
 */
        __pyx_t_25 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 409, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        __pyx_t_26 = __Pyx_PyInt_From_int((__pyx_v_j_node[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 409, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_26);
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_id, __pyx_t_26) < 0) __PYX_ERR(0, 409, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
        __pyx_t_26 = __Pyx_PyInt_From_int((__pyx_v_j_pos[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 409, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_26);
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_pos, __pyx_t_26) < 0) __PYX_ERR(0, 409, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_str, __pyx_n_u__12) < 0) __PYX_ERR(0, 409, __pyx_L1_error)
        __pyx_t_26 = __Pyx_PyInt_From_long((__pyx_v_i - 2)); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 409, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_26);
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_pos, __pyx_t_26) < 0) __PYX_ERR(0, 409, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":410
 *                 alignment.info.append(
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": "_", "read_pos": i - 2,
 *                      "read_str": read[i - 2], "type": 0})             # <<<<<<<<<<<<<<
 *                 alignment.info.append(
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": "_", "read_pos": i - 3,
 */
        __pyx_t_10 = (__pyx_v_i - 2);
        __pyx_t_27 = __Pyx_GetItemInt_Unicode(__pyx_v_read, __pyx_t_10, long, 1, __Pyx_PyInt_From_long, 0, 1, 0); if (unlikely(__pyx_t_27 == (Py_UCS4)-1)) __PYX_ERR(0, 410, __pyx_L1_error)
        __pyx_t_26 = PyUnicode_FromOrdinal(__pyx_t_27); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 410, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_26);
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_str, __pyx_t_26) < 0) __PYX_ERR(0, 409, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_type, __pyx_int_0) < 0) __PYX_ERR(0, 409, __pyx_L1_error)

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":408
 *                 # add - to target
 *                 # read pos is i - 4 because I want to position to represent the beginning of the codon
 *                 alignment.info.append(             # <<<<<<<<<<<<<<
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": "_", "read_pos": i - 2,
 *                      "read_str": read[i - 2], "type": 0})
 */
        __pyx_t_28 = __Pyx_PyList_Append(__pyx_v_alignment->info, __pyx_t_25); if (unlikely(__pyx_t_28 == ((int)-1))) __PYX_ERR(0, 408, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":411
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": "_", "read_pos": i - 2,
 *                      "read_str": read[i - 2], "type": 0})
 *                 alignment.info.append(             # <<<<<<<<<<<<<<
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": "_", "read_pos": i - 3,
 *                      "read_str": read[i - 3], "type": 0})
 */
        if (unlikely(__pyx_v_alignment->info == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
          __PYX_ERR(0, 411, __pyx_L1_error)
        }

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":412
 *                      "read_str": read[i - 2], "type": 0})
 *                 alignment.info.append(
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": "_", "read_pos": i - 3,             # <<<<<<<<<<<<<<
 *                      "read_str": read[i - 3], "type": 0})
 *                 alignment.info.append(
 */
        __pyx_t_25 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 412, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        __pyx_t_26 = __Pyx_PyInt_From_int((__pyx_v_j_node[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 412, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_26);
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_id, __pyx_t_26) < 0) __PYX_ERR(0, 412, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
        __pyx_t_26 = __Pyx_PyInt_From_int((__pyx_v_j_pos[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 412, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_26);
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_pos, __pyx_t_26) < 0) __PYX_ERR(0, 412, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_str, __pyx_n_u__12) < 0) __PYX_ERR(0, 412, __pyx_L1_error)
        __pyx_t_26 = __Pyx_PyInt_From_long((__pyx_v_i - 3)); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 412, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_26);
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_pos, __pyx_t_26) < 0) __PYX_ERR(0, 412, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":413
 *                 alignment.info.append(
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": "_", "read_pos": i - 3,
 *                      "read_str": read[i - 3], "type": 0})             # <<<<<<<<<<<<<<
 *                 alignment.info.append(
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": "_", "read_pos": i - 4,
 */
        __pyx_t_10 = (__pyx_v_i - 3);
        __pyx_t_27 = __Pyx_GetItemInt_Unicode(__pyx_v_read, __pyx_t_10, long, 1, __Pyx_PyInt_From_long, 0, 1, 0); if (unlikely(__pyx_t_27 == (Py_UCS4)-1)) __PYX_ERR(0, 413, __pyx_L1_error)
        __pyx_t_26 = PyUnicode_FromOrdinal(__pyx_t_27); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 413, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_26);
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_str, __pyx_t_26) < 0) __PYX_ERR(0, 412, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_type, __pyx_int_0) < 0) __PYX_ERR(0, 412, __pyx_L1_error)

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":411
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": "_", "read_pos": i - 2,
 *                      "read_str": read[i - 2], "type": 0})
 *                 alignment.info.append(             # <<<<<<<<<<<<<<
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": "_", "read_pos": i - 3,
 *                      "read_str": read[i - 3], "type": 0})
 */
        __pyx_t_28 = __Pyx_PyList_Append(__pyx_v_alignment->info, __pyx_t_25); if (unlikely(__pyx_t_28 == ((int)-1))) __PYX_ERR(0, 411, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":414
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": "_", "read_pos": i - 3,
 *                      "read_str": read[i - 3], "type": 0})
 *                 alignment.info.append(             # <<<<<<<<<<<<<<
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": "_", "read_pos": i - 4,
 *                      "read_str": read[i - 4], "type": 0})
 */
        if (unlikely(__pyx_v_alignment->info == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
          __PYX_ERR(0, 414, __pyx_L1_error)
        }

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":415
 *                      "read_str": read[i - 3], "type": 0})
 *                 alignment.info.append(
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": "_", "read_pos": i - 4,             # <<<<<<<<<<<<<<
 *                      "read_str": read[i - 4], "type": 0})
 * 
 */
        __pyx_t_25 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 415, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        __pyx_t_26 = __Pyx_PyInt_From_int((__pyx_v_j_node[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 415, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_26);
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_id, __pyx_t_26) < 0) __PYX_ERR(0, 415, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
        __pyx_t_26 = __Pyx_PyInt_From_int((__pyx_v_j_pos[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 415, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_26);
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_pos, __pyx_t_26) < 0) __PYX_ERR(0, 415, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_str, __pyx_n_u__12) < 0) __PYX_ERR(0, 415, __pyx_L1_error)
        __pyx_t_26 = __Pyx_PyInt_From_long((__pyx_v_i - 4)); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 415, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_26);
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_pos, __pyx_t_26) < 0) __PYX_ERR(0, 415, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":416
 *                 alignment.info.append(
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": "_", "read_pos": i - 4,
 *                      "read_str": read[i - 4], "type": 0})             # <<<<<<<<<<<<<<
 * 
 *                 alignment.path.append(j_node[j - 1])
 */
        __pyx_t_10 = (__pyx_v_i - 4);
        __pyx_t_27 = __Pyx_GetItemInt_Unicode(__pyx_v_read, __pyx_t_10, long, 1, __Pyx_PyInt_From_long, 0, 1, 0); if (unlikely(__pyx_t_27 == (Py_UCS4)-1)) __PYX_ERR(0, 416, __pyx_L1_error)
        __pyx_t_26 = PyUnicode_FromOrdinal(__pyx_t_27); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 416, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_26);
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_str, __pyx_t_26) < 0) __PYX_ERR(0, 415, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_type, __pyx_int_0) < 0) __PYX_ERR(0, 415, __pyx_L1_error)

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":414
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": "_", "read_pos": i - 3,
 *                      "read_str": read[i - 3], "type": 0})
 *                 alignment.info.append(             # <<<<<<<<<<<<<<
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": "_", "read_pos": i - 4,
 *                      "read_str": read[i - 4], "type": 0})
 */
        __pyx_t_28 = __Pyx_PyList_Append(__pyx_v_alignment->info, __pyx_t_25); if (unlikely(__pyx_t_28 == ((int)-1))) __PYX_ERR(0, 414, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":418
 *                      "read_str": read[i - 4], "type": 0})
 * 
 *                 alignment.path.append(j_node[j - 1])             # <<<<<<<<<<<<<<
 *                 alignment.n_indels += 3
 *                 # alignment.add_alignment(j_node[j - 1], -1, j_pos[j - 1], read_as_int[i - 1], i - 1)
 */
        if (unlikely(__pyx_v_alignment->path == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
          __PYX_ERR(0, 418, __pyx_L1_error)
        }
        __pyx_t_25 = __Pyx_PyInt_From_int((__pyx_v_j_node[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 418, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        __pyx_t_28 = __Pyx_PyList_Append(__pyx_v_alignment->path, __pyx_t_25); if (unlikely(__pyx_t_28 == ((int)-1))) __PYX_ERR(0, 418, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":419
 * 
 *                 alignment.path.append(j_node[j - 1])
 *                 alignment.n_indels += 3             # <<<<<<<<<<<<<<
 *                 # alignment.add_alignment(j_node[j - 1], -1, j_pos[j - 1], read_as_int[i - 1], i - 1)
 * 
 */
        __pyx_v_alignment->n_indels = (__pyx_v_alignment->n_indels + 3);

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":404
 *             # print(f"and the graph letter is {chr(all_seq_as_int[j-1] + 65)}")
 *             # print(f"and the codon is {read[i-4] + read[i-3] + read[i-2]}")
 *             if back_j == j:  # insertion             # <<<<<<<<<<<<<<
 *                 # print("insertion")
 *                 # add - to target
 */
        goto __pyx_L41;
      }

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":422
 *                 # alignment.add_alignment(j_node[j - 1], -1, j_pos[j - 1], read_as_int[i - 1], i - 1)
 * 
 *             elif back_i == i:  # deletion             # <<<<<<<<<<<<<<
 *                 # skipping a whole codon in the read, so ---
 *                 # print("deletion")
 */
      __pyx_t_13 = ((__pyx_v_back_i == __pyx_v_i) != 0);
      if (__pyx_t_13) {

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":425
 *                 # skipping a whole codon in the read, so ---
 *                 # print("deletion")
 *                 alignment.info.append(             # <<<<<<<<<<<<<<
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": chr(all_seq_as_int[j - 1] + 65),
 *                      "read_pos": i - 2, "read_str": "---", "type": 1})
 */
        if (unlikely(__pyx_v_alignment->info == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
          __PYX_ERR(0, 425, __pyx_L1_error)
        }

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":426
 *                 # print("deletion")
 *                 alignment.info.append(
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": chr(all_seq_as_int[j - 1] + 65),             # <<<<<<<<<<<<<<
 *                      "read_pos": i - 2, "read_str": "---", "type": 1})
 *                 alignment.info.append(
 */
        __pyx_t_25 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 426, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        __pyx_t_26 = __Pyx_PyInt_From_int((__pyx_v_j_node[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 426, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_26);
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_id, __pyx_t_26) < 0) __PYX_ERR(0, 426, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
        __pyx_t_26 = __Pyx_PyInt_From_int((__pyx_v_j_pos[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 426, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_26);
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_pos, __pyx_t_26) < 0) __PYX_ERR(0, 426, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
        __pyx_t_26 = __Pyx_PyInt_From_long(((__pyx_v_all_seq_as_int[(__pyx_v_j - 1)]) + 65)); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 426, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_26);
        __pyx_t_24 = __Pyx_PyObject_CallOneArg(__pyx_builtin_chr, __pyx_t_26); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 426, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_24);
        __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_str, __pyx_t_24) < 0) __PYX_ERR(0, 426, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":427
 *                 alignment.info.append(
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": chr(all_seq_as_int[j - 1] + 65),
 *                      "read_pos": i - 2, "read_str": "---", "type": 1})             # <<<<<<<<<<<<<<
 *                 alignment.info.append(
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": chr(all_seq_as_int[j - 1] + 65),
 */
        __pyx_t_24 = __Pyx_PyInt_From_long((__pyx_v_i - 2)); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 427, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_24);
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_pos, __pyx_t_24) < 0) __PYX_ERR(0, 426, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_str, __pyx_kp_u__13) < 0) __PYX_ERR(0, 426, __pyx_L1_error)
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_type, __pyx_int_1) < 0) __PYX_ERR(0, 426, __pyx_L1_error)

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":425
 *                 # skipping a whole codon in the read, so ---
 *                 # print("deletion")
 *                 alignment.info.append(             # <<<<<<<<<<<<<<
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": chr(all_seq_as_int[j - 1] + 65),
 *                      "read_pos": i - 2, "read_str": "---", "type": 1})
 */
        __pyx_t_28 = __Pyx_PyList_Append(__pyx_v_alignment->info, __pyx_t_25); if (unlikely(__pyx_t_28 == ((int)-1))) __PYX_ERR(0, 425, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":428
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": chr(all_seq_as_int[j - 1] + 65),
 *                      "read_pos": i - 2, "read_str": "---", "type": 1})
 *                 alignment.info.append(             # <<<<<<<<<<<<<<
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": chr(all_seq_as_int[j - 1] + 65),
 *                      "read_pos": i - 3, "read_str": "---", "type": 1})
 */
        if (unlikely(__pyx_v_alignment->info == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
          __PYX_ERR(0, 428, __pyx_L1_error)
        }

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":429
 *                      "read_pos": i - 2, "read_str": "---", "type": 1})
 *                 alignment.info.append(
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": chr(all_seq_as_int[j - 1] + 65),             # <<<<<<<<<<<<<<
 *                      "read_pos": i - 3, "read_str": "---", "type": 1})
 *                 alignment.info.append(
 */
        __pyx_t_25 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 429, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        __pyx_t_24 = __Pyx_PyInt_From_int((__pyx_v_j_node[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 429, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_24);
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_id, __pyx_t_24) < 0) __PYX_ERR(0, 429, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
        __pyx_t_24 = __Pyx_PyInt_From_int((__pyx_v_j_pos[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 429, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_24);
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_pos, __pyx_t_24) < 0) __PYX_ERR(0, 429, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
        __pyx_t_24 = __Pyx_PyInt_From_long(((__pyx_v_all_seq_as_int[(__pyx_v_j - 1)]) + 65)); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 429, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_24);
        __pyx_t_26 = __Pyx_PyObject_CallOneArg(__pyx_builtin_chr, __pyx_t_24); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 429, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_26);
        __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_str, __pyx_t_26) < 0) __PYX_ERR(0, 429, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":430
 *                 alignment.info.append(
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": chr(all_seq_as_int[j - 1] + 65),
 *                      "read_pos": i - 3, "read_str": "---", "type": 1})             # <<<<<<<<<<<<<<
 *                 alignment.info.append(
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": chr(all_seq_as_int[j - 1] + 65),
 */
        __pyx_t_26 = __Pyx_PyInt_From_long((__pyx_v_i - 3)); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 430, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_26);
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_pos, __pyx_t_26) < 0) __PYX_ERR(0, 429, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_str, __pyx_kp_u__13) < 0) __PYX_ERR(0, 429, __pyx_L1_error)
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_type, __pyx_int_1) < 0) __PYX_ERR(0, 429, __pyx_L1_error)

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":428
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": chr(all_seq_as_int[j - 1] + 65),
 *                      "read_pos": i - 2, "read_str": "---", "type": 1})
 *                 alignment.info.append(             # <<<<<<<<<<<<<<
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": chr(all_seq_as_int[j - 1] + 65),
 *                      "read_pos": i - 3, "read_str": "---", "type": 1})
 */
        __pyx_t_28 = __Pyx_PyList_Append(__pyx_v_alignment->info, __pyx_t_25); if (unlikely(__pyx_t_28 == ((int)-1))) __PYX_ERR(0, 428, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":431
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": chr(all_seq_as_int[j - 1] + 65),
 *                      "read_pos": i - 3, "read_str": "---", "type": 1})
 *                 alignment.info.append(             # <<<<<<<<<<<<<<
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": chr(all_seq_as_int[j - 1] + 65),
 *                      "read_pos": i - 4, "read_str": "---", "type": 1})
 */
        if (unlikely(__pyx_v_alignment->info == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
          __PYX_ERR(0, 431, __pyx_L1_error)
        }

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":432
 *                      "read_pos": i - 3, "read_str": "---", "type": 1})
 *                 alignment.info.append(
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": chr(all_seq_as_int[j - 1] + 65),             # <<<<<<<<<<<<<<
 *                      "read_pos": i - 4, "read_str": "---", "type": 1})
 * 
 */
        __pyx_t_25 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 432, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        __pyx_t_26 = __Pyx_PyInt_From_int((__pyx_v_j_node[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 432, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_26);
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_id, __pyx_t_26) < 0) __PYX_ERR(0, 432, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
        __pyx_t_26 = __Pyx_PyInt_From_int((__pyx_v_j_pos[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 432, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_26);
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_pos, __pyx_t_26) < 0) __PYX_ERR(0, 432, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
        __pyx_t_26 = __Pyx_PyInt_From_long(((__pyx_v_all_seq_as_int[(__pyx_v_j - 1)]) + 65)); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 432, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_26);
        __pyx_t_24 = __Pyx_PyObject_CallOneArg(__pyx_builtin_chr, __pyx_t_26); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 432, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_24);
        __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_str, __pyx_t_24) < 0) __PYX_ERR(0, 432, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":433
 *                 alignment.info.append(
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": chr(all_seq_as_int[j - 1] + 65),
 *                      "read_pos": i - 4, "read_str": "---", "type": 1})             # <<<<<<<<<<<<<<
 * 
 *                 alignment.path.append(j_node[j - 1])
 */
        __pyx_t_24 = __Pyx_PyInt_From_long((__pyx_v_i - 4)); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 433, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_24);
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_pos, __pyx_t_24) < 0) __PYX_ERR(0, 432, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_str, __pyx_kp_u__13) < 0) __PYX_ERR(0, 432, __pyx_L1_error)
        if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_type, __pyx_int_1) < 0) __PYX_ERR(0, 432, __pyx_L1_error)

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":431
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": chr(all_seq_as_int[j - 1] + 65),
 *                      "read_pos": i - 3, "read_str": "---", "type": 1})
 *                 alignment.info.append(             # <<<<<<<<<<<<<<
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": chr(all_seq_as_int[j - 1] + 65),
 *                      "read_pos": i - 4, "read_str": "---", "type": 1})
 */
        __pyx_t_28 = __Pyx_PyList_Append(__pyx_v_alignment->info, __pyx_t_25); if (unlikely(__pyx_t_28 == ((int)-1))) __PYX_ERR(0, 431, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":435
 *                      "read_pos": i - 4, "read_str": "---", "type": 1})
 * 
 *                 alignment.path.append(j_node[j - 1])             # <<<<<<<<<<<<<<
 *                 alignment.n_indels += 3
 * 
 */
        if (unlikely(__pyx_v_alignment->path == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
          __PYX_ERR(0, 435, __pyx_L1_error)
        }
        __pyx_t_25 = __Pyx_PyInt_From_int((__pyx_v_j_node[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 435, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        __pyx_t_28 = __Pyx_PyList_Append(__pyx_v_alignment->path, __pyx_t_25); if (unlikely(__pyx_t_28 == ((int)-1))) __PYX_ERR(0, 435, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":436
 * 
 *                 alignment.path.append(j_node[j - 1])
 *                 alignment.n_indels += 3             # <<<<<<<<<<<<<<
 * 
 *                 # alignment.add_alignment(j_node[j - 1], all_seq_as_int[j - 1], j_pos[j - 1], -1, i - 1)
 */
        __pyx_v_alignment->n_indels = (__pyx_v_alignment->n_indels + 3);

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":422
 *                 # alignment.add_alignment(j_node[j - 1], -1, j_pos[j - 1], read_as_int[i - 1], i - 1)
 * 
 *             elif back_i == i:  # deletion             # <<<<<<<<<<<<<<
 *                 # skipping a whole codon in the read, so ---
 *                 # print("deletion")
 */
        goto __pyx_L41;
      }

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":439
 * 
 *                 # alignment.add_alignment(j_node[j - 1], all_seq_as_int[j - 1], j_pos[j - 1], -1, i - 1)
 *             elif back_i == i - 3:  # match or mismatch             # <<<<<<<<<<<<<<
 *                 # if I am correct, the current letter is the end of the codon and is i-2, to get the codon, it's i-2-2, i-2-1, and i-2-0
 *                 codon = codon_translate_0base[read_as_int[i - 4]][read_as_int[i - 3]][read_as_int[i - 2]]
 */
      __pyx_t_13 = ((__pyx_v_back_i == (__pyx_v_i - 3)) != 0);
      if (__pyx_t_13) {

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":441
 *             elif back_i == i - 3:  # match or mismatch
 *                 # if I am correct, the current letter is the end of the codon and is i-2, to get the codon, it's i-2-2, i-2-1, and i-2-0
 *                 codon = codon_translate_0base[read_as_int[i - 4]][read_as_int[i - 3]][read_as_int[i - 2]]             # <<<<<<<<<<<<<<
 * 
 *                 graph_character = chr(all_seq_as_int[j - 1] + 65)
 */
        __pyx_v_codon = (((__pyx_v_codon_translate_0base[(__pyx_v_read_as_int[(__pyx_v_i - 4)])])[(__pyx_v_read_as_int[(__pyx_v_i - 3)])])[(__pyx_v_read_as_int[(__pyx_v_i - 2)])]);

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":443
 *                 codon = codon_translate_0base[read_as_int[i - 4]][read_as_int[i - 3]][read_as_int[i - 2]]
 * 
 *                 graph_character = chr(all_seq_as_int[j - 1] + 65)             # <<<<<<<<<<<<<<
 *                 if all_seq_as_int[j - 1] == codon:
 *                     cigar_type = 2
 */
        __pyx_t_25 = __Pyx_PyInt_From_long(((__pyx_v_all_seq_as_int[(__pyx_v_j - 1)]) + 65)); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 443, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        __pyx_t_24 = __Pyx_PyObject_CallOneArg(__pyx_builtin_chr, __pyx_t_25); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 443, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_24);
        __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
        __Pyx_XDECREF_SET(__pyx_v_graph_character, __pyx_t_24);
        __pyx_t_24 = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":444
 * 
 *                 graph_character = chr(all_seq_as_int[j - 1] + 65)
 *                 if all_seq_as_int[j - 1] == codon:             # <<<<<<<<<<<<<<
 *                     cigar_type = 2
 *                     alignment.n_matches += 3
 */
        __pyx_t_13 = (((__pyx_v_all_seq_as_int[(__pyx_v_j - 1)]) == __pyx_v_codon) != 0);
        if (__pyx_t_13) {

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":445
 *                 graph_character = chr(all_seq_as_int[j - 1] + 65)
 *                 if all_seq_as_int[j - 1] == codon:
 *                     cigar_type = 2             # <<<<<<<<<<<<<<
 *                     alignment.n_matches += 3
 *                 else:
 */
          __pyx_v_cigar_type = 2;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":446
 *                 if all_seq_as_int[j - 1] == codon:
 *                     cigar_type = 2
 *                     alignment.n_matches += 3             # <<<<<<<<<<<<<<
 *                 else:
 *                     cigar_type = 3
 */
          __pyx_v_alignment->n_matches = (__pyx_v_alignment->n_matches + 3);

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":444
 * 
 *                 graph_character = chr(all_seq_as_int[j - 1] + 65)
 *                 if all_seq_as_int[j - 1] == codon:             # <<<<<<<<<<<<<<
 *                     cigar_type = 2
 *                     alignment.n_matches += 3
 */
          goto __pyx_L42;
        }

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":448
 *                     alignment.n_matches += 3
 *                 else:
 *                     cigar_type = 3             # <<<<<<<<<<<<<<
 *                     alignment.n_mismatches += 3
 *                 alignment.info.append(
 */
        /*else*/ {
          __pyx_v_cigar_type = 3;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":449
 *                 else:
 *                     cigar_type = 3
 *                     alignment.n_mismatches += 3             # <<<<<<<<<<<<<<
 *                 alignment.info.append(
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": graph_character, "read_pos": i - 2,
 */
          __pyx_v_alignment->n_mismatches = (__pyx_v_alignment->n_mismatches + 3);
        }
        __pyx_L42:;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":450
 *                     cigar_type = 3
 *                     alignment.n_mismatches += 3
 *                 alignment.info.append(             # <<<<<<<<<<<<<<
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": graph_character, "read_pos": i - 2,
 *                      "read_str": read[i - 2], "type": cigar_type})
 */
        if (unlikely(__pyx_v_alignment->info == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
          __PYX_ERR(0, 450, __pyx_L1_error)
        }

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":451
 *                     alignment.n_mismatches += 3
 *                 alignment.info.append(
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": graph_character, "read_pos": i - 2,             # <<<<<<<<<<<<<<
 *                      "read_str": read[i - 2], "type": cigar_type})
 *                 alignment.info.append(
 */
        __pyx_t_24 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 451, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_24);
        __pyx_t_25 = __Pyx_PyInt_From_int((__pyx_v_j_node[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 451, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        if (PyDict_SetItem(__pyx_t_24, __pyx_n_u_node_id, __pyx_t_25) < 0) __PYX_ERR(0, 451, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
        __pyx_t_25 = __Pyx_PyInt_From_int((__pyx_v_j_pos[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 451, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        if (PyDict_SetItem(__pyx_t_24, __pyx_n_u_node_pos, __pyx_t_25) < 0) __PYX_ERR(0, 451, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
        if (PyDict_SetItem(__pyx_t_24, __pyx_n_u_node_str, __pyx_v_graph_character) < 0) __PYX_ERR(0, 451, __pyx_L1_error)
        __pyx_t_25 = __Pyx_PyInt_From_long((__pyx_v_i - 2)); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 451, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        if (PyDict_SetItem(__pyx_t_24, __pyx_n_u_read_pos, __pyx_t_25) < 0) __PYX_ERR(0, 451, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":452
 *                 alignment.info.append(
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": graph_character, "read_pos": i - 2,
 *                      "read_str": read[i - 2], "type": cigar_type})             # <<<<<<<<<<<<<<
 *                 alignment.info.append(
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": graph_character, "read_pos": i - 3,
 */
        __pyx_t_10 = (__pyx_v_i - 2);
        __pyx_t_27 = __Pyx_GetItemInt_Unicode(__pyx_v_read, __pyx_t_10, long, 1, __Pyx_PyInt_From_long, 0, 1, 0); if (unlikely(__pyx_t_27 == (Py_UCS4)-1)) __PYX_ERR(0, 452, __pyx_L1_error)
        __pyx_t_25 = PyUnicode_FromOrdinal(__pyx_t_27); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 452, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        if (PyDict_SetItem(__pyx_t_24, __pyx_n_u_read_str, __pyx_t_25) < 0) __PYX_ERR(0, 451, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
        __pyx_t_25 = __Pyx_PyInt_From_long(__pyx_v_cigar_type); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 452, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        if (PyDict_SetItem(__pyx_t_24, __pyx_n_u_type, __pyx_t_25) < 0) __PYX_ERR(0, 451, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":450
 *                     cigar_type = 3
 *                     alignment.n_mismatches += 3
 *                 alignment.info.append(             # <<<<<<<<<<<<<<
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": graph_character, "read_pos": i - 2,
 *                      "read_str": read[i - 2], "type": cigar_type})
 */
        __pyx_t_28 = __Pyx_PyList_Append(__pyx_v_alignment->info, __pyx_t_24); if (unlikely(__pyx_t_28 == ((int)-1))) __PYX_ERR(0, 450, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":453
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": graph_character, "read_pos": i - 2,
 *                      "read_str": read[i - 2], "type": cigar_type})
 *                 alignment.info.append(             # <<<<<<<<<<<<<<
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": graph_character, "read_pos": i - 3,
 *                      "read_str": read[i - 3], "type": cigar_type})
 */
        if (unlikely(__pyx_v_alignment->info == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
          __PYX_ERR(0, 453, __pyx_L1_error)
        }

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":454
 *                      "read_str": read[i - 2], "type": cigar_type})
 *                 alignment.info.append(
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": graph_character, "read_pos": i - 3,             # <<<<<<<<<<<<<<
 *                      "read_str": read[i - 3], "type": cigar_type})
 *                 alignment.info.append(
 */
        __pyx_t_24 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 454, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_24);
        __pyx_t_25 = __Pyx_PyInt_From_int((__pyx_v_j_node[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 454, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        if (PyDict_SetItem(__pyx_t_24, __pyx_n_u_node_id, __pyx_t_25) < 0) __PYX_ERR(0, 454, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
        __pyx_t_25 = __Pyx_PyInt_From_int((__pyx_v_j_pos[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 454, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        if (PyDict_SetItem(__pyx_t_24, __pyx_n_u_node_pos, __pyx_t_25) < 0) __PYX_ERR(0, 454, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
        if (PyDict_SetItem(__pyx_t_24, __pyx_n_u_node_str, __pyx_v_graph_character) < 0) __PYX_ERR(0, 454, __pyx_L1_error)
        __pyx_t_25 = __Pyx_PyInt_From_long((__pyx_v_i - 3)); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 454, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        if (PyDict_SetItem(__pyx_t_24, __pyx_n_u_read_pos, __pyx_t_25) < 0) __PYX_ERR(0, 454, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":455
 *                 alignment.info.append(
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": graph_character, "read_pos": i - 3,
 *                      "read_str": read[i - 3], "type": cigar_type})             # <<<<<<<<<<<<<<
 *                 alignment.info.append(
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": graph_character, "read_pos": i - 4,
 */
        __pyx_t_10 = (__pyx_v_i - 3);
        __pyx_t_27 = __Pyx_GetItemInt_Unicode(__pyx_v_read, __pyx_t_10, long, 1, __Pyx_PyInt_From_long, 0, 1, 0); if (unlikely(__pyx_t_27 == (Py_UCS4)-1)) __PYX_ERR(0, 455, __pyx_L1_error)
        __pyx_t_25 = PyUnicode_FromOrdinal(__pyx_t_27); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 455, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        if (PyDict_SetItem(__pyx_t_24, __pyx_n_u_read_str, __pyx_t_25) < 0) __PYX_ERR(0, 454, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
        __pyx_t_25 = __Pyx_PyInt_From_long(__pyx_v_cigar_type); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 455, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        if (PyDict_SetItem(__pyx_t_24, __pyx_n_u_type, __pyx_t_25) < 0) __PYX_ERR(0, 454, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":453
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": graph_character, "read_pos": i - 2,
 *                      "read_str": read[i - 2], "type": cigar_type})
 *                 alignment.info.append(             # <<<<<<<<<<<<<<
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": graph_character, "read_pos": i - 3,
 *                      "read_str": read[i - 3], "type": cigar_type})
 */
        __pyx_t_28 = __Pyx_PyList_Append(__pyx_v_alignment->info, __pyx_t_24); if (unlikely(__pyx_t_28 == ((int)-1))) __PYX_ERR(0, 453, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":456
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": graph_character, "read_pos": i - 3,
 *                      "read_str": read[i - 3], "type": cigar_type})
 *                 alignment.info.append(             # <<<<<<<<<<<<<<
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": graph_character, "read_pos": i - 4,
 *                      "read_str": read[i - 4], "type": cigar_type})
 */
        if (unlikely(__pyx_v_alignment->info == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
          __PYX_ERR(0, 456, __pyx_L1_error)
        }

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":457
 *                      "read_str": read[i - 3], "type": cigar_type})
 *                 alignment.info.append(
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": graph_character, "read_pos": i - 4,             # <<<<<<<<<<<<<<
 *                      "read_str": read[i - 4], "type": cigar_type})
 * 
 */
        __pyx_t_24 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 457, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_24);
        __pyx_t_25 = __Pyx_PyInt_From_int((__pyx_v_j_node[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 457, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        if (PyDict_SetItem(__pyx_t_24, __pyx_n_u_node_id, __pyx_t_25) < 0) __PYX_ERR(0, 457, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
        __pyx_t_25 = __Pyx_PyInt_From_int((__pyx_v_j_pos[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 457, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        if (PyDict_SetItem(__pyx_t_24, __pyx_n_u_node_pos, __pyx_t_25) < 0) __PYX_ERR(0, 457, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
        if (PyDict_SetItem(__pyx_t_24, __pyx_n_u_node_str, __pyx_v_graph_character) < 0) __PYX_ERR(0, 457, __pyx_L1_error)
        __pyx_t_25 = __Pyx_PyInt_From_long((__pyx_v_i - 4)); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 457, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        if (PyDict_SetItem(__pyx_t_24, __pyx_n_u_read_pos, __pyx_t_25) < 0) __PYX_ERR(0, 457, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":458
 *                 alignment.info.append(
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": graph_character, "read_pos": i - 4,
 *                      "read_str": read[i - 4], "type": cigar_type})             # <<<<<<<<<<<<<<
 * 
 *                 alignment.path.append(j_node[j - 1])
 */
        __pyx_t_10 = (__pyx_v_i - 4);
        __pyx_t_27 = __Pyx_GetItemInt_Unicode(__pyx_v_read, __pyx_t_10, long, 1, __Pyx_PyInt_From_long, 0, 1, 0); if (unlikely(__pyx_t_27 == (Py_UCS4)-1)) __PYX_ERR(0, 458, __pyx_L1_error)
        __pyx_t_25 = PyUnicode_FromOrdinal(__pyx_t_27); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 458, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        if (PyDict_SetItem(__pyx_t_24, __pyx_n_u_read_str, __pyx_t_25) < 0) __PYX_ERR(0, 457, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
        __pyx_t_25 = __Pyx_PyInt_From_long(__pyx_v_cigar_type); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 458, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        if (PyDict_SetItem(__pyx_t_24, __pyx_n_u_type, __pyx_t_25) < 0) __PYX_ERR(0, 457, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":456
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": graph_character, "read_pos": i - 3,
 *                      "read_str": read[i - 3], "type": cigar_type})
 *                 alignment.info.append(             # <<<<<<<<<<<<<<
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": graph_character, "read_pos": i - 4,
 *                      "read_str": read[i - 4], "type": cigar_type})
 */
        __pyx_t_28 = __Pyx_PyList_Append(__pyx_v_alignment->info, __pyx_t_24); if (unlikely(__pyx_t_28 == ((int)-1))) __PYX_ERR(0, 456, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":460
 *                      "read_str": read[i - 4], "type": cigar_type})
 * 
 *                 alignment.path.append(j_node[j - 1])             # <<<<<<<<<<<<<<
 *                 # add both target letter and
 *                 # I need to take the codon at i-2, i-1, i
 */
        if (unlikely(__pyx_v_alignment->path == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
          __PYX_ERR(0, 460, __pyx_L1_error)
        }
        __pyx_t_24 = __Pyx_PyInt_From_int((__pyx_v_j_node[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 460, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_24);
        __pyx_t_28 = __Pyx_PyList_Append(__pyx_v_alignment->path, __pyx_t_24); if (unlikely(__pyx_t_28 == ((int)-1))) __PYX_ERR(0, 460, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":439
 * 
 *                 # alignment.add_alignment(j_node[j - 1], all_seq_as_int[j - 1], j_pos[j - 1], -1, i - 1)
 *             elif back_i == i - 3:  # match or mismatch             # <<<<<<<<<<<<<<
 *                 # if I am correct, the current letter is the end of the codon and is i-2, to get the codon, it's i-2-2, i-2-1, and i-2-0
 *                 codon = codon_translate_0base[read_as_int[i - 4]][read_as_int[i - 3]][read_as_int[i - 2]]
 */
        goto __pyx_L41;
      }

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":466
 *                 # alignment.add_alignment(j_node[j - 1], all_seq_as_int[j - 1], j_pos[j - 1], read_as_int[i - 1], i - 1)
 * 
 *             elif back_i == i - 2:  # deletion frameshift             # <<<<<<<<<<<<<<
 *                 # print(f"current {i}, {j} and backtrace are {back_i}, {back_j}")
 *                 alignment.info.append(
 */
      __pyx_t_13 = ((__pyx_v_back_i == (__pyx_v_i - 2)) != 0);
      if (__pyx_t_13) {

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":468
 *             elif back_i == i - 2:  # deletion frameshift
 *                 # print(f"current {i}, {j} and backtrace are {back_i}, {back_j}")
 *                 alignment.info.append(             # <<<<<<<<<<<<<<
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": chr(all_seq_as_int[j - 1] + 65),
 *                      "read_pos": i - 2, "read_str": read[i - 2], "type": 3})
 */
        if (unlikely(__pyx_v_alignment->info == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
          __PYX_ERR(0, 468, __pyx_L1_error)
        }

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":469
 *                 # print(f"current {i}, {j} and backtrace are {back_i}, {back_j}")
 *                 alignment.info.append(
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": chr(all_seq_as_int[j - 1] + 65),             # <<<<<<<<<<<<<<
 *                      "read_pos": i - 2, "read_str": read[i - 2], "type": 3})
 *                 alignment.info.append(
 */
        __pyx_t_24 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 469, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_24);
        __pyx_t_25 = __Pyx_PyInt_From_int((__pyx_v_j_node[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 469, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        if (PyDict_SetItem(__pyx_t_24, __pyx_n_u_node_id, __pyx_t_25) < 0) __PYX_ERR(0, 469, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
        __pyx_t_25 = __Pyx_PyInt_From_int((__pyx_v_j_pos[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 469, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        if (PyDict_SetItem(__pyx_t_24, __pyx_n_u_node_pos, __pyx_t_25) < 0) __PYX_ERR(0, 469, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
        __pyx_t_25 = __Pyx_PyInt_From_long(((__pyx_v_all_seq_as_int[(__pyx_v_j - 1)]) + 65)); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 469, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        __pyx_t_26 = __Pyx_PyObject_CallOneArg(__pyx_builtin_chr, __pyx_t_25); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 469, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_26);
        __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
        if (PyDict_SetItem(__pyx_t_24, __pyx_n_u_node_str, __pyx_t_26) < 0) __PYX_ERR(0, 469, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":470
 *                 alignment.info.append(
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": chr(all_seq_as_int[j - 1] + 65),
 *                      "read_pos": i - 2, "read_str": read[i - 2], "type": 3})             # <<<<<<<<<<<<<<
 *                 alignment.info.append(
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": chr(all_seq_as_int[j - 1] + 65),
 */
        __pyx_t_26 = __Pyx_PyInt_From_long((__pyx_v_i - 2)); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 470, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_26);
        if (PyDict_SetItem(__pyx_t_24, __pyx_n_u_read_pos, __pyx_t_26) < 0) __PYX_ERR(0, 469, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
        __pyx_t_10 = (__pyx_v_i - 2);
        __pyx_t_27 = __Pyx_GetItemInt_Unicode(__pyx_v_read, __pyx_t_10, long, 1, __Pyx_PyInt_From_long, 0, 1, 0); if (unlikely(__pyx_t_27 == (Py_UCS4)-1)) __PYX_ERR(0, 470, __pyx_L1_error)
        __pyx_t_26 = PyUnicode_FromOrdinal(__pyx_t_27); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 470, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_26);
        if (PyDict_SetItem(__pyx_t_24, __pyx_n_u_read_str, __pyx_t_26) < 0) __PYX_ERR(0, 469, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
        if (PyDict_SetItem(__pyx_t_24, __pyx_n_u_type, __pyx_int_3) < 0) __PYX_ERR(0, 469, __pyx_L1_error)

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":468
 *             elif back_i == i - 2:  # deletion frameshift
 *                 # print(f"current {i}, {j} and backtrace are {back_i}, {back_j}")
 *                 alignment.info.append(             # <<<<<<<<<<<<<<
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": chr(all_seq_as_int[j - 1] + 65),
 *                      "read_pos": i - 2, "read_str": read[i - 2], "type": 3})
 */
        __pyx_t_28 = __Pyx_PyList_Append(__pyx_v_alignment->info, __pyx_t_24); if (unlikely(__pyx_t_28 == ((int)-1))) __PYX_ERR(0, 468, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":471
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": chr(all_seq_as_int[j - 1] + 65),
 *                      "read_pos": i - 2, "read_str": read[i - 2], "type": 3})
 *                 alignment.info.append(             # <<<<<<<<<<<<<<
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": chr(all_seq_as_int[j - 1] + 65),
 *                      "read_pos": i - 3, "read_str": read[i - 3], "type": 3})
 */
        if (unlikely(__pyx_v_alignment->info == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
          __PYX_ERR(0, 471, __pyx_L1_error)
        }

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":472
 *                      "read_pos": i - 2, "read_str": read[i - 2], "type": 3})
 *                 alignment.info.append(
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": chr(all_seq_as_int[j - 1] + 65),             # <<<<<<<<<<<<<<
 *                      "read_pos": i - 3, "read_str": read[i - 3], "type": 3})
 * 
 */
        __pyx_t_24 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 472, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_24);
        __pyx_t_26 = __Pyx_PyInt_From_int((__pyx_v_j_node[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 472, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_26);
        if (PyDict_SetItem(__pyx_t_24, __pyx_n_u_node_id, __pyx_t_26) < 0) __PYX_ERR(0, 472, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
        __pyx_t_26 = __Pyx_PyInt_From_int((__pyx_v_j_pos[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 472, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_26);
        if (PyDict_SetItem(__pyx_t_24, __pyx_n_u_node_pos, __pyx_t_26) < 0) __PYX_ERR(0, 472, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
        __pyx_t_26 = __Pyx_PyInt_From_long(((__pyx_v_all_seq_as_int[(__pyx_v_j - 1)]) + 65)); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 472, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_26);
        __pyx_t_25 = __Pyx_PyObject_CallOneArg(__pyx_builtin_chr, __pyx_t_26); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 472, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
        if (PyDict_SetItem(__pyx_t_24, __pyx_n_u_node_str, __pyx_t_25) < 0) __PYX_ERR(0, 472, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":473
 *                 alignment.info.append(
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": chr(all_seq_as_int[j - 1] + 65),
 *                      "read_pos": i - 3, "read_str": read[i - 3], "type": 3})             # <<<<<<<<<<<<<<
 * 
 *                 alignment.path.append(j_node[j - 1])
 */
        __pyx_t_25 = __Pyx_PyInt_From_long((__pyx_v_i - 3)); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 473, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        if (PyDict_SetItem(__pyx_t_24, __pyx_n_u_read_pos, __pyx_t_25) < 0) __PYX_ERR(0, 472, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
        __pyx_t_10 = (__pyx_v_i - 3);
        __pyx_t_27 = __Pyx_GetItemInt_Unicode(__pyx_v_read, __pyx_t_10, long, 1, __Pyx_PyInt_From_long, 0, 1, 0); if (unlikely(__pyx_t_27 == (Py_UCS4)-1)) __PYX_ERR(0, 473, __pyx_L1_error)
        __pyx_t_25 = PyUnicode_FromOrdinal(__pyx_t_27); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 473, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        if (PyDict_SetItem(__pyx_t_24, __pyx_n_u_read_str, __pyx_t_25) < 0) __PYX_ERR(0, 472, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
        if (PyDict_SetItem(__pyx_t_24, __pyx_n_u_type, __pyx_int_3) < 0) __PYX_ERR(0, 472, __pyx_L1_error)

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":471
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": chr(all_seq_as_int[j - 1] + 65),
 *                      "read_pos": i - 2, "read_str": read[i - 2], "type": 3})
 *                 alignment.info.append(             # <<<<<<<<<<<<<<
 *                     {"node_id": j_node[j - 1], "node_pos": j_pos[j - 1], "node_str": chr(all_seq_as_int[j - 1] + 65),
 *                      "read_pos": i - 3, "read_str": read[i - 3], "type": 3})
 */
        __pyx_t_28 = __Pyx_PyList_Append(__pyx_v_alignment->info, __pyx_t_24); if (unlikely(__pyx_t_28 == ((int)-1))) __PYX_ERR(0, 471, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":475
 *                      "read_pos": i - 3, "read_str": read[i - 3], "type": 3})
 * 
 *                 alignment.path.append(j_node[j - 1])             # <<<<<<<<<<<<<<
 *                 alignment.n_mismatches += 2
 * 
 */
        if (unlikely(__pyx_v_alignment->path == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
          __PYX_ERR(0, 475, __pyx_L1_error)
        }
        __pyx_t_24 = __Pyx_PyInt_From_int((__pyx_v_j_node[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 475, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_24);
        __pyx_t_28 = __Pyx_PyList_Append(__pyx_v_alignment->path, __pyx_t_24); if (unlikely(__pyx_t_28 == ((int)-1))) __PYX_ERR(0, 475, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":476
 * 
 *                 alignment.path.append(j_node[j - 1])
 *                 alignment.n_mismatches += 2             # <<<<<<<<<<<<<<
 * 
 *             elif back_i == i - 4:  # insertion frameshift
 */
        __pyx_v_alignment->n_mismatches = (__pyx_v_alignment->n_mismatches + 2);

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":466
 *                 # alignment.add_alignment(j_node[j - 1], all_seq_as_int[j - 1], j_pos[j - 1], read_as_int[i - 1], i - 1)
 * 
 *             elif back_i == i - 2:  # deletion frameshift             # <<<<<<<<<<<<<<
 *                 # print(f"current {i}, {j} and backtrace are {back_i}, {back_j}")
 *                 alignment.info.append(
 */
        goto __pyx_L41;
      }

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":478
 *                 alignment.n_mismatches += 2
 * 
 *             elif back_i == i - 4:  # insertion frameshift             # <<<<<<<<<<<<<<
 *                 # todo I think I still need to check the insertion-match model, not just the match-insertion
 *                 codon1 = codon_translate_0base[read_as_int[i - 5]][read_as_int[i - 4]][read_as_int[i - 3]]
 */
      __pyx_t_13 = ((__pyx_v_back_i == (__pyx_v_i - 4)) != 0);
      if (__pyx_t_13) {

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":480
 *             elif back_i == i - 4:  # insertion frameshift
 *                 # todo I think I still need to check the insertion-match model, not just the match-insertion
 *                 codon1 = codon_translate_0base[read_as_int[i - 5]][read_as_int[i - 4]][read_as_int[i - 3]]             # <<<<<<<<<<<<<<
 *                 codon2 = codon_translate_0base[read_as_int[i - 4]][read_as_int[i - 3]][read_as_int[i - 2]]
 *                 graph_character = chr(all_seq_as_int[j - 1] + 65)
 */
        __pyx_v_codon1 = (((__pyx_v_codon_translate_0base[(__pyx_v_read_as_int[(__pyx_v_i - 5)])])[(__pyx_v_read_as_int[(__pyx_v_i - 4)])])[(__pyx_v_read_as_int[(__pyx_v_i - 3)])]);

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":481
 *                 # todo I think I still need to check the insertion-match model, not just the match-insertion
 *                 codon1 = codon_translate_0base[read_as_int[i - 5]][read_as_int[i - 4]][read_as_int[i - 3]]
 *                 codon2 = codon_translate_0base[read_as_int[i - 4]][read_as_int[i - 3]][read_as_int[i - 2]]             # <<<<<<<<<<<<<<
 *                 graph_character = chr(all_seq_as_int[j - 1] + 65)
 * 
 */
        __pyx_v_codon2 = (((__pyx_v_codon_translate_0base[(__pyx_v_read_as_int[(__pyx_v_i - 4)])])[(__pyx_v_read_as_int[(__pyx_v_i - 3)])])[(__pyx_v_read_as_int[(__pyx_v_i - 2)])]);

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":482
 *                 codon1 = codon_translate_0base[read_as_int[i - 5]][read_as_int[i - 4]][read_as_int[i - 3]]
 *                 codon2 = codon_translate_0base[read_as_int[i - 4]][read_as_int[i - 3]][read_as_int[i - 2]]
 *                 graph_character = chr(all_seq_as_int[j - 1] + 65)             # <<<<<<<<<<<<<<
 * 
 *                 # hacky, but saves me time instead of re-writing a bunch of things in the Alignment class
 */
        __pyx_t_24 = __Pyx_PyInt_From_long(((__pyx_v_all_seq_as_int[(__pyx_v_j - 1)]) + 65)); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 482, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_24);
        __pyx_t_25 = __Pyx_PyObject_CallOneArg(__pyx_builtin_chr, __pyx_t_24); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 482, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
        __Pyx_XDECREF_SET(__pyx_v_graph_character, __pyx_t_25);
        __pyx_t_25 = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":485
 * 
 *                 # hacky, but saves me time instead of re-writing a bunch of things in the Alignment class
 *                 if all_seq_as_int[j - 1] == codon1:             # <<<<<<<<<<<<<<
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 2,
 */
        __pyx_t_13 = (((__pyx_v_all_seq_as_int[(__pyx_v_j - 1)]) == __pyx_v_codon1) != 0);
        if (__pyx_t_13) {

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":486
 *                 # hacky, but saves me time instead of re-writing a bunch of things in the Alignment class
 *                 if all_seq_as_int[j - 1] == codon1:
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],             # <<<<<<<<<<<<<<
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 2,
 *                                            "read_str": read[i - 2],
 */
          if (unlikely(__pyx_v_alignment->info == Py_None)) {
            PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
            __PYX_ERR(0, 486, __pyx_L1_error)
          }
          __pyx_t_25 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 486, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_25);
          __pyx_t_24 = __Pyx_PyInt_From_int((__pyx_v_j_node[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 486, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_id, __pyx_t_24) < 0) __PYX_ERR(0, 486, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          __pyx_t_24 = __Pyx_PyInt_From_int((__pyx_v_j_pos[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 486, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_pos, __pyx_t_24) < 0) __PYX_ERR(0, 486, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":487
 *                 if all_seq_as_int[j - 1] == codon1:
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 2,             # <<<<<<<<<<<<<<
 *                                            "read_str": read[i - 2],
 *                                            "type": 0})
 */
          __pyx_t_24 = __Pyx_PyInt_From_long(((__pyx_v_all_seq_as_int[(__pyx_v_j - 1)]) + 65)); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 487, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          __pyx_t_26 = __Pyx_PyObject_CallOneArg(__pyx_builtin_chr, __pyx_t_24); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 487, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_str, __pyx_t_26) < 0) __PYX_ERR(0, 486, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
          __pyx_t_26 = __Pyx_PyInt_From_long((__pyx_v_i - 2)); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 487, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_pos, __pyx_t_26) < 0) __PYX_ERR(0, 486, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":488
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 2,
 *                                            "read_str": read[i - 2],             # <<<<<<<<<<<<<<
 *                                            "type": 0})
 * 
 */
          __pyx_t_10 = (__pyx_v_i - 2);
          __pyx_t_27 = __Pyx_GetItemInt_Unicode(__pyx_v_read, __pyx_t_10, long, 1, __Pyx_PyInt_From_long, 0, 1, 0); if (unlikely(__pyx_t_27 == (Py_UCS4)-1)) __PYX_ERR(0, 488, __pyx_L1_error)
          __pyx_t_26 = PyUnicode_FromOrdinal(__pyx_t_27); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 488, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_str, __pyx_t_26) < 0) __PYX_ERR(0, 486, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_type, __pyx_int_0) < 0) __PYX_ERR(0, 486, __pyx_L1_error)

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":486
 *                 # hacky, but saves me time instead of re-writing a bunch of things in the Alignment class
 *                 if all_seq_as_int[j - 1] == codon1:
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],             # <<<<<<<<<<<<<<
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 2,
 *                                            "read_str": read[i - 2],
 */
          __pyx_t_28 = __Pyx_PyList_Append(__pyx_v_alignment->info, __pyx_t_25); if (unlikely(__pyx_t_28 == ((int)-1))) __PYX_ERR(0, 486, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":491
 *                                            "type": 0})
 * 
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],             # <<<<<<<<<<<<<<
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 3,
 *                                            "read_str": read[i - 3],
 */
          if (unlikely(__pyx_v_alignment->info == Py_None)) {
            PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
            __PYX_ERR(0, 491, __pyx_L1_error)
          }
          __pyx_t_25 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 491, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_25);
          __pyx_t_26 = __Pyx_PyInt_From_int((__pyx_v_j_node[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 491, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_id, __pyx_t_26) < 0) __PYX_ERR(0, 491, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
          __pyx_t_26 = __Pyx_PyInt_From_int((__pyx_v_j_pos[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 491, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_pos, __pyx_t_26) < 0) __PYX_ERR(0, 491, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":492
 * 
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 3,             # <<<<<<<<<<<<<<
 *                                            "read_str": read[i - 3],
 *                                            "type": 2})
 */
          __pyx_t_26 = __Pyx_PyInt_From_long(((__pyx_v_all_seq_as_int[(__pyx_v_j - 1)]) + 65)); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 492, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          __pyx_t_24 = __Pyx_PyObject_CallOneArg(__pyx_builtin_chr, __pyx_t_26); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 492, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_str, __pyx_t_24) < 0) __PYX_ERR(0, 491, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          __pyx_t_24 = __Pyx_PyInt_From_long((__pyx_v_i - 3)); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 492, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_pos, __pyx_t_24) < 0) __PYX_ERR(0, 491, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":493
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 3,
 *                                            "read_str": read[i - 3],             # <<<<<<<<<<<<<<
 *                                            "type": 2})
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 */
          __pyx_t_10 = (__pyx_v_i - 3);
          __pyx_t_27 = __Pyx_GetItemInt_Unicode(__pyx_v_read, __pyx_t_10, long, 1, __Pyx_PyInt_From_long, 0, 1, 0); if (unlikely(__pyx_t_27 == (Py_UCS4)-1)) __PYX_ERR(0, 493, __pyx_L1_error)
          __pyx_t_24 = PyUnicode_FromOrdinal(__pyx_t_27); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 493, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_str, __pyx_t_24) < 0) __PYX_ERR(0, 491, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_type, __pyx_int_2) < 0) __PYX_ERR(0, 491, __pyx_L1_error)

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":491
 *                                            "type": 0})
 * 
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],             # <<<<<<<<<<<<<<
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 3,
 *                                            "read_str": read[i - 3],
 */
          __pyx_t_28 = __Pyx_PyList_Append(__pyx_v_alignment->info, __pyx_t_25); if (unlikely(__pyx_t_28 == ((int)-1))) __PYX_ERR(0, 491, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":495
 *                                            "read_str": read[i - 3],
 *                                            "type": 2})
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],             # <<<<<<<<<<<<<<
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 4,
 *                                            "read_str": read[i - 4],
 */
          if (unlikely(__pyx_v_alignment->info == Py_None)) {
            PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
            __PYX_ERR(0, 495, __pyx_L1_error)
          }
          __pyx_t_25 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 495, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_25);
          __pyx_t_24 = __Pyx_PyInt_From_int((__pyx_v_j_node[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 495, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_id, __pyx_t_24) < 0) __PYX_ERR(0, 495, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          __pyx_t_24 = __Pyx_PyInt_From_int((__pyx_v_j_pos[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 495, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_pos, __pyx_t_24) < 0) __PYX_ERR(0, 495, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":496
 *                                            "type": 2})
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 4,             # <<<<<<<<<<<<<<
 *                                            "read_str": read[i - 4],
 *                                            "type": 2})
 */
          __pyx_t_24 = __Pyx_PyInt_From_long(((__pyx_v_all_seq_as_int[(__pyx_v_j - 1)]) + 65)); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 496, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          __pyx_t_26 = __Pyx_PyObject_CallOneArg(__pyx_builtin_chr, __pyx_t_24); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 496, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_str, __pyx_t_26) < 0) __PYX_ERR(0, 495, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
          __pyx_t_26 = __Pyx_PyInt_From_long((__pyx_v_i - 4)); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 496, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_pos, __pyx_t_26) < 0) __PYX_ERR(0, 495, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":497
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 4,
 *                                            "read_str": read[i - 4],             # <<<<<<<<<<<<<<
 *                                            "type": 2})
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 */
          __pyx_t_10 = (__pyx_v_i - 4);
          __pyx_t_27 = __Pyx_GetItemInt_Unicode(__pyx_v_read, __pyx_t_10, long, 1, __Pyx_PyInt_From_long, 0, 1, 0); if (unlikely(__pyx_t_27 == (Py_UCS4)-1)) __PYX_ERR(0, 497, __pyx_L1_error)
          __pyx_t_26 = PyUnicode_FromOrdinal(__pyx_t_27); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 497, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_str, __pyx_t_26) < 0) __PYX_ERR(0, 495, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_type, __pyx_int_2) < 0) __PYX_ERR(0, 495, __pyx_L1_error)

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":495
 *                                            "read_str": read[i - 3],
 *                                            "type": 2})
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],             # <<<<<<<<<<<<<<
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 4,
 *                                            "read_str": read[i - 4],
 */
          __pyx_t_28 = __Pyx_PyList_Append(__pyx_v_alignment->info, __pyx_t_25); if (unlikely(__pyx_t_28 == ((int)-1))) __PYX_ERR(0, 495, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":499
 *                                            "read_str": read[i - 4],
 *                                            "type": 2})
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],             # <<<<<<<<<<<<<<
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 5,
 *                                            "read_str": read[i - 5],
 */
          if (unlikely(__pyx_v_alignment->info == Py_None)) {
            PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
            __PYX_ERR(0, 499, __pyx_L1_error)
          }
          __pyx_t_25 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 499, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_25);
          __pyx_t_26 = __Pyx_PyInt_From_int((__pyx_v_j_node[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 499, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_id, __pyx_t_26) < 0) __PYX_ERR(0, 499, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
          __pyx_t_26 = __Pyx_PyInt_From_int((__pyx_v_j_pos[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 499, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_pos, __pyx_t_26) < 0) __PYX_ERR(0, 499, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":500
 *                                            "type": 2})
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 5,             # <<<<<<<<<<<<<<
 *                                            "read_str": read[i - 5],
 *                                            "type": 2})
 */
          __pyx_t_26 = __Pyx_PyInt_From_long(((__pyx_v_all_seq_as_int[(__pyx_v_j - 1)]) + 65)); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 500, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          __pyx_t_24 = __Pyx_PyObject_CallOneArg(__pyx_builtin_chr, __pyx_t_26); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 500, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_str, __pyx_t_24) < 0) __PYX_ERR(0, 499, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          __pyx_t_24 = __Pyx_PyInt_From_long((__pyx_v_i - 5)); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 500, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_pos, __pyx_t_24) < 0) __PYX_ERR(0, 499, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":501
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 5,
 *                                            "read_str": read[i - 5],             # <<<<<<<<<<<<<<
 *                                            "type": 2})
 * 
 */
          __pyx_t_10 = (__pyx_v_i - 5);
          __pyx_t_27 = __Pyx_GetItemInt_Unicode(__pyx_v_read, __pyx_t_10, long, 1, __Pyx_PyInt_From_long, 0, 1, 0); if (unlikely(__pyx_t_27 == (Py_UCS4)-1)) __PYX_ERR(0, 501, __pyx_L1_error)
          __pyx_t_24 = PyUnicode_FromOrdinal(__pyx_t_27); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 501, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_str, __pyx_t_24) < 0) __PYX_ERR(0, 499, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_type, __pyx_int_2) < 0) __PYX_ERR(0, 499, __pyx_L1_error)

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":499
 *                                            "read_str": read[i - 4],
 *                                            "type": 2})
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],             # <<<<<<<<<<<<<<
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 5,
 *                                            "read_str": read[i - 5],
 */
          __pyx_t_28 = __Pyx_PyList_Append(__pyx_v_alignment->info, __pyx_t_25); if (unlikely(__pyx_t_28 == ((int)-1))) __PYX_ERR(0, 499, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":504
 *                                            "type": 2})
 * 
 *                     alignment.n_matches += 3             # <<<<<<<<<<<<<<
 *                 elif all_seq_as_int[j - 1] == codon2:
 * 
 */
          __pyx_v_alignment->n_matches = (__pyx_v_alignment->n_matches + 3);

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":485
 * 
 *                 # hacky, but saves me time instead of re-writing a bunch of things in the Alignment class
 *                 if all_seq_as_int[j - 1] == codon1:             # <<<<<<<<<<<<<<
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 2,
 */
          goto __pyx_L43;
        }

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":505
 * 
 *                     alignment.n_matches += 3
 *                 elif all_seq_as_int[j - 1] == codon2:             # <<<<<<<<<<<<<<
 * 
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 */
        __pyx_t_13 = (((__pyx_v_all_seq_as_int[(__pyx_v_j - 1)]) == __pyx_v_codon2) != 0);
        if (__pyx_t_13) {

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":507
 *                 elif all_seq_as_int[j - 1] == codon2:
 * 
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],             # <<<<<<<<<<<<<<
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 2,
 *                                            "read_str": read[i - 2],
 */
          if (unlikely(__pyx_v_alignment->info == Py_None)) {
            PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
            __PYX_ERR(0, 507, __pyx_L1_error)
          }
          __pyx_t_25 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 507, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_25);
          __pyx_t_24 = __Pyx_PyInt_From_int((__pyx_v_j_node[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 507, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_id, __pyx_t_24) < 0) __PYX_ERR(0, 507, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          __pyx_t_24 = __Pyx_PyInt_From_int((__pyx_v_j_pos[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 507, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_pos, __pyx_t_24) < 0) __PYX_ERR(0, 507, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":508
 * 
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 2,             # <<<<<<<<<<<<<<
 *                                            "read_str": read[i - 2],
 *                                            "type": 2})
 */
          __pyx_t_24 = __Pyx_PyInt_From_long(((__pyx_v_all_seq_as_int[(__pyx_v_j - 1)]) + 65)); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 508, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          __pyx_t_26 = __Pyx_PyObject_CallOneArg(__pyx_builtin_chr, __pyx_t_24); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 508, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_str, __pyx_t_26) < 0) __PYX_ERR(0, 507, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
          __pyx_t_26 = __Pyx_PyInt_From_long((__pyx_v_i - 2)); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 508, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_pos, __pyx_t_26) < 0) __PYX_ERR(0, 507, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":509
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 2,
 *                                            "read_str": read[i - 2],             # <<<<<<<<<<<<<<
 *                                            "type": 2})
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 */
          __pyx_t_10 = (__pyx_v_i - 2);
          __pyx_t_27 = __Pyx_GetItemInt_Unicode(__pyx_v_read, __pyx_t_10, long, 1, __Pyx_PyInt_From_long, 0, 1, 0); if (unlikely(__pyx_t_27 == (Py_UCS4)-1)) __PYX_ERR(0, 509, __pyx_L1_error)
          __pyx_t_26 = PyUnicode_FromOrdinal(__pyx_t_27); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 509, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_str, __pyx_t_26) < 0) __PYX_ERR(0, 507, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_type, __pyx_int_2) < 0) __PYX_ERR(0, 507, __pyx_L1_error)

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":507
 *                 elif all_seq_as_int[j - 1] == codon2:
 * 
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],             # <<<<<<<<<<<<<<
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 2,
 *                                            "read_str": read[i - 2],
 */
          __pyx_t_28 = __Pyx_PyList_Append(__pyx_v_alignment->info, __pyx_t_25); if (unlikely(__pyx_t_28 == ((int)-1))) __PYX_ERR(0, 507, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":511
 *                                            "read_str": read[i - 2],
 *                                            "type": 2})
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],             # <<<<<<<<<<<<<<
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 3,
 *                                            "read_str": read[i - 3],
 */
          if (unlikely(__pyx_v_alignment->info == Py_None)) {
            PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
            __PYX_ERR(0, 511, __pyx_L1_error)
          }
          __pyx_t_25 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 511, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_25);
          __pyx_t_26 = __Pyx_PyInt_From_int((__pyx_v_j_node[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 511, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_id, __pyx_t_26) < 0) __PYX_ERR(0, 511, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
          __pyx_t_26 = __Pyx_PyInt_From_int((__pyx_v_j_pos[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 511, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_pos, __pyx_t_26) < 0) __PYX_ERR(0, 511, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":512
 *                                            "type": 2})
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 3,             # <<<<<<<<<<<<<<
 *                                            "read_str": read[i - 3],
 *                                            "type": 2})
 */
          __pyx_t_26 = __Pyx_PyInt_From_long(((__pyx_v_all_seq_as_int[(__pyx_v_j - 1)]) + 65)); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 512, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          __pyx_t_24 = __Pyx_PyObject_CallOneArg(__pyx_builtin_chr, __pyx_t_26); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 512, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_str, __pyx_t_24) < 0) __PYX_ERR(0, 511, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          __pyx_t_24 = __Pyx_PyInt_From_long((__pyx_v_i - 3)); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 512, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_pos, __pyx_t_24) < 0) __PYX_ERR(0, 511, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":513
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 3,
 *                                            "read_str": read[i - 3],             # <<<<<<<<<<<<<<
 *                                            "type": 2})
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 */
          __pyx_t_10 = (__pyx_v_i - 3);
          __pyx_t_27 = __Pyx_GetItemInt_Unicode(__pyx_v_read, __pyx_t_10, long, 1, __Pyx_PyInt_From_long, 0, 1, 0); if (unlikely(__pyx_t_27 == (Py_UCS4)-1)) __PYX_ERR(0, 513, __pyx_L1_error)
          __pyx_t_24 = PyUnicode_FromOrdinal(__pyx_t_27); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 513, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_str, __pyx_t_24) < 0) __PYX_ERR(0, 511, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_type, __pyx_int_2) < 0) __PYX_ERR(0, 511, __pyx_L1_error)

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":511
 *                                            "read_str": read[i - 2],
 *                                            "type": 2})
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],             # <<<<<<<<<<<<<<
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 3,
 *                                            "read_str": read[i - 3],
 */
          __pyx_t_28 = __Pyx_PyList_Append(__pyx_v_alignment->info, __pyx_t_25); if (unlikely(__pyx_t_28 == ((int)-1))) __PYX_ERR(0, 511, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":515
 *                                            "read_str": read[i - 3],
 *                                            "type": 2})
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],             # <<<<<<<<<<<<<<
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 4,
 *                                            "read_str": read[i - 4],
 */
          if (unlikely(__pyx_v_alignment->info == Py_None)) {
            PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
            __PYX_ERR(0, 515, __pyx_L1_error)
          }
          __pyx_t_25 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 515, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_25);
          __pyx_t_24 = __Pyx_PyInt_From_int((__pyx_v_j_node[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 515, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_id, __pyx_t_24) < 0) __PYX_ERR(0, 515, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          __pyx_t_24 = __Pyx_PyInt_From_int((__pyx_v_j_pos[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 515, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_pos, __pyx_t_24) < 0) __PYX_ERR(0, 515, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":516
 *                                            "type": 2})
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 4,             # <<<<<<<<<<<<<<
 *                                            "read_str": read[i - 4],
 *                                            "type": 2})
 */
          __pyx_t_24 = __Pyx_PyInt_From_long(((__pyx_v_all_seq_as_int[(__pyx_v_j - 1)]) + 65)); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 516, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          __pyx_t_26 = __Pyx_PyObject_CallOneArg(__pyx_builtin_chr, __pyx_t_24); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 516, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_str, __pyx_t_26) < 0) __PYX_ERR(0, 515, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
          __pyx_t_26 = __Pyx_PyInt_From_long((__pyx_v_i - 4)); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 516, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_pos, __pyx_t_26) < 0) __PYX_ERR(0, 515, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":517
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 4,
 *                                            "read_str": read[i - 4],             # <<<<<<<<<<<<<<
 *                                            "type": 2})
 * 
 */
          __pyx_t_10 = (__pyx_v_i - 4);
          __pyx_t_27 = __Pyx_GetItemInt_Unicode(__pyx_v_read, __pyx_t_10, long, 1, __Pyx_PyInt_From_long, 0, 1, 0); if (unlikely(__pyx_t_27 == (Py_UCS4)-1)) __PYX_ERR(0, 517, __pyx_L1_error)
          __pyx_t_26 = PyUnicode_FromOrdinal(__pyx_t_27); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 517, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_str, __pyx_t_26) < 0) __PYX_ERR(0, 515, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_type, __pyx_int_2) < 0) __PYX_ERR(0, 515, __pyx_L1_error)

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":515
 *                                            "read_str": read[i - 3],
 *                                            "type": 2})
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],             # <<<<<<<<<<<<<<
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 4,
 *                                            "read_str": read[i - 4],
 */
          __pyx_t_28 = __Pyx_PyList_Append(__pyx_v_alignment->info, __pyx_t_25); if (unlikely(__pyx_t_28 == ((int)-1))) __PYX_ERR(0, 515, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":520
 *                                            "type": 2})
 * 
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],             # <<<<<<<<<<<<<<
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 5,
 *                                            "read_str": read[i - 5],
 */
          if (unlikely(__pyx_v_alignment->info == Py_None)) {
            PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
            __PYX_ERR(0, 520, __pyx_L1_error)
          }
          __pyx_t_25 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 520, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_25);
          __pyx_t_26 = __Pyx_PyInt_From_int((__pyx_v_j_node[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 520, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_id, __pyx_t_26) < 0) __PYX_ERR(0, 520, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
          __pyx_t_26 = __Pyx_PyInt_From_int((__pyx_v_j_pos[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 520, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_pos, __pyx_t_26) < 0) __PYX_ERR(0, 520, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":521
 * 
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 5,             # <<<<<<<<<<<<<<
 *                                            "read_str": read[i - 5],
 *                                            "type": 0})
 */
          __pyx_t_26 = __Pyx_PyInt_From_long(((__pyx_v_all_seq_as_int[(__pyx_v_j - 1)]) + 65)); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 521, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          __pyx_t_24 = __Pyx_PyObject_CallOneArg(__pyx_builtin_chr, __pyx_t_26); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 521, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_str, __pyx_t_24) < 0) __PYX_ERR(0, 520, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          __pyx_t_24 = __Pyx_PyInt_From_long((__pyx_v_i - 5)); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 521, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_pos, __pyx_t_24) < 0) __PYX_ERR(0, 520, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":522
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 5,
 *                                            "read_str": read[i - 5],             # <<<<<<<<<<<<<<
 *                                            "type": 0})
 *                     alignment.n_matches += 3
 */
          __pyx_t_10 = (__pyx_v_i - 5);
          __pyx_t_27 = __Pyx_GetItemInt_Unicode(__pyx_v_read, __pyx_t_10, long, 1, __Pyx_PyInt_From_long, 0, 1, 0); if (unlikely(__pyx_t_27 == (Py_UCS4)-1)) __PYX_ERR(0, 522, __pyx_L1_error)
          __pyx_t_24 = PyUnicode_FromOrdinal(__pyx_t_27); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 522, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_str, __pyx_t_24) < 0) __PYX_ERR(0, 520, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_type, __pyx_int_0) < 0) __PYX_ERR(0, 520, __pyx_L1_error)

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":520
 *                                            "type": 2})
 * 
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],             # <<<<<<<<<<<<<<
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 5,
 *                                            "read_str": read[i - 5],
 */
          __pyx_t_28 = __Pyx_PyList_Append(__pyx_v_alignment->info, __pyx_t_25); if (unlikely(__pyx_t_28 == ((int)-1))) __PYX_ERR(0, 520, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":524
 *                                            "read_str": read[i - 5],
 *                                            "type": 0})
 *                     alignment.n_matches += 3             # <<<<<<<<<<<<<<
 *                 else:
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 */
          __pyx_v_alignment->n_matches = (__pyx_v_alignment->n_matches + 3);

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":505
 * 
 *                     alignment.n_matches += 3
 *                 elif all_seq_as_int[j - 1] == codon2:             # <<<<<<<<<<<<<<
 * 
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 */
          goto __pyx_L43;
        }

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":526
 *                     alignment.n_matches += 3
 *                 else:
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],             # <<<<<<<<<<<<<<
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 2,
 *                                            "read_str": read[i - 2],
 */
        /*else*/ {
          if (unlikely(__pyx_v_alignment->info == Py_None)) {
            PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
            __PYX_ERR(0, 526, __pyx_L1_error)
          }
          __pyx_t_25 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 526, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_25);
          __pyx_t_24 = __Pyx_PyInt_From_int((__pyx_v_j_node[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 526, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_id, __pyx_t_24) < 0) __PYX_ERR(0, 526, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          __pyx_t_24 = __Pyx_PyInt_From_int((__pyx_v_j_pos[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 526, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_pos, __pyx_t_24) < 0) __PYX_ERR(0, 526, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":527
 *                 else:
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 2,             # <<<<<<<<<<<<<<
 *                                            "read_str": read[i - 2],
 *                                            "type": 0})
 */
          __pyx_t_24 = __Pyx_PyInt_From_long(((__pyx_v_all_seq_as_int[(__pyx_v_j - 1)]) + 65)); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 527, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          __pyx_t_26 = __Pyx_PyObject_CallOneArg(__pyx_builtin_chr, __pyx_t_24); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 527, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_str, __pyx_t_26) < 0) __PYX_ERR(0, 526, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
          __pyx_t_26 = __Pyx_PyInt_From_long((__pyx_v_i - 2)); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 527, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_pos, __pyx_t_26) < 0) __PYX_ERR(0, 526, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":528
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 2,
 *                                            "read_str": read[i - 2],             # <<<<<<<<<<<<<<
 *                                            "type": 0})
 * 
 */
          __pyx_t_10 = (__pyx_v_i - 2);
          __pyx_t_27 = __Pyx_GetItemInt_Unicode(__pyx_v_read, __pyx_t_10, long, 1, __Pyx_PyInt_From_long, 0, 1, 0); if (unlikely(__pyx_t_27 == (Py_UCS4)-1)) __PYX_ERR(0, 528, __pyx_L1_error)
          __pyx_t_26 = PyUnicode_FromOrdinal(__pyx_t_27); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 528, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_str, __pyx_t_26) < 0) __PYX_ERR(0, 526, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_type, __pyx_int_0) < 0) __PYX_ERR(0, 526, __pyx_L1_error)

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":526
 *                     alignment.n_matches += 3
 *                 else:
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],             # <<<<<<<<<<<<<<
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 2,
 *                                            "read_str": read[i - 2],
 */
          __pyx_t_28 = __Pyx_PyList_Append(__pyx_v_alignment->info, __pyx_t_25); if (unlikely(__pyx_t_28 == ((int)-1))) __PYX_ERR(0, 526, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":531
 *                                            "type": 0})
 * 
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],             # <<<<<<<<<<<<<<
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 3,
 *                                            "read_str": read[i - 3],
 */
          if (unlikely(__pyx_v_alignment->info == Py_None)) {
            PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
            __PYX_ERR(0, 531, __pyx_L1_error)
          }
          __pyx_t_25 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 531, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_25);
          __pyx_t_26 = __Pyx_PyInt_From_int((__pyx_v_j_node[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 531, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_id, __pyx_t_26) < 0) __PYX_ERR(0, 531, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
          __pyx_t_26 = __Pyx_PyInt_From_int((__pyx_v_j_pos[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 531, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_pos, __pyx_t_26) < 0) __PYX_ERR(0, 531, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":532
 * 
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 3,             # <<<<<<<<<<<<<<
 *                                            "read_str": read[i - 3],
 *                                            "type": 3})
 */
          __pyx_t_26 = __Pyx_PyInt_From_long(((__pyx_v_all_seq_as_int[(__pyx_v_j - 1)]) + 65)); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 532, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          __pyx_t_24 = __Pyx_PyObject_CallOneArg(__pyx_builtin_chr, __pyx_t_26); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 532, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_str, __pyx_t_24) < 0) __PYX_ERR(0, 531, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          __pyx_t_24 = __Pyx_PyInt_From_long((__pyx_v_i - 3)); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 532, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_pos, __pyx_t_24) < 0) __PYX_ERR(0, 531, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":533
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 3,
 *                                            "read_str": read[i - 3],             # <<<<<<<<<<<<<<
 *                                            "type": 3})
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 */
          __pyx_t_10 = (__pyx_v_i - 3);
          __pyx_t_27 = __Pyx_GetItemInt_Unicode(__pyx_v_read, __pyx_t_10, long, 1, __Pyx_PyInt_From_long, 0, 1, 0); if (unlikely(__pyx_t_27 == (Py_UCS4)-1)) __PYX_ERR(0, 533, __pyx_L1_error)
          __pyx_t_24 = PyUnicode_FromOrdinal(__pyx_t_27); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 533, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_str, __pyx_t_24) < 0) __PYX_ERR(0, 531, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_type, __pyx_int_3) < 0) __PYX_ERR(0, 531, __pyx_L1_error)

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":531
 *                                            "type": 0})
 * 
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],             # <<<<<<<<<<<<<<
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 3,
 *                                            "read_str": read[i - 3],
 */
          __pyx_t_28 = __Pyx_PyList_Append(__pyx_v_alignment->info, __pyx_t_25); if (unlikely(__pyx_t_28 == ((int)-1))) __PYX_ERR(0, 531, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":535
 *                                            "read_str": read[i - 3],
 *                                            "type": 3})
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],             # <<<<<<<<<<<<<<
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 4,
 *                                            "read_str": read[i - 4],
 */
          if (unlikely(__pyx_v_alignment->info == Py_None)) {
            PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
            __PYX_ERR(0, 535, __pyx_L1_error)
          }
          __pyx_t_25 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 535, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_25);
          __pyx_t_24 = __Pyx_PyInt_From_int((__pyx_v_j_node[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 535, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_id, __pyx_t_24) < 0) __PYX_ERR(0, 535, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          __pyx_t_24 = __Pyx_PyInt_From_int((__pyx_v_j_pos[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 535, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_pos, __pyx_t_24) < 0) __PYX_ERR(0, 535, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":536
 *                                            "type": 3})
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 4,             # <<<<<<<<<<<<<<
 *                                            "read_str": read[i - 4],
 *                                            "type": 3})
 */
          __pyx_t_24 = __Pyx_PyInt_From_long(((__pyx_v_all_seq_as_int[(__pyx_v_j - 1)]) + 65)); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 536, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          __pyx_t_26 = __Pyx_PyObject_CallOneArg(__pyx_builtin_chr, __pyx_t_24); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 536, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_str, __pyx_t_26) < 0) __PYX_ERR(0, 535, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
          __pyx_t_26 = __Pyx_PyInt_From_long((__pyx_v_i - 4)); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 536, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_pos, __pyx_t_26) < 0) __PYX_ERR(0, 535, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":537
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 4,
 *                                            "read_str": read[i - 4],             # <<<<<<<<<<<<<<
 *                                            "type": 3})
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 */
          __pyx_t_10 = (__pyx_v_i - 4);
          __pyx_t_27 = __Pyx_GetItemInt_Unicode(__pyx_v_read, __pyx_t_10, long, 1, __Pyx_PyInt_From_long, 0, 1, 0); if (unlikely(__pyx_t_27 == (Py_UCS4)-1)) __PYX_ERR(0, 537, __pyx_L1_error)
          __pyx_t_26 = PyUnicode_FromOrdinal(__pyx_t_27); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 537, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_str, __pyx_t_26) < 0) __PYX_ERR(0, 535, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_type, __pyx_int_3) < 0) __PYX_ERR(0, 535, __pyx_L1_error)

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":535
 *                                            "read_str": read[i - 3],
 *                                            "type": 3})
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],             # <<<<<<<<<<<<<<
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 4,
 *                                            "read_str": read[i - 4],
 */
          __pyx_t_28 = __Pyx_PyList_Append(__pyx_v_alignment->info, __pyx_t_25); if (unlikely(__pyx_t_28 == ((int)-1))) __PYX_ERR(0, 535, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":539
 *                                            "read_str": read[i - 4],
 *                                            "type": 3})
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],             # <<<<<<<<<<<<<<
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 5,
 *                                            "read_str": read[i - 5],
 */
          if (unlikely(__pyx_v_alignment->info == Py_None)) {
            PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
            __PYX_ERR(0, 539, __pyx_L1_error)
          }
          __pyx_t_25 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 539, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_25);
          __pyx_t_26 = __Pyx_PyInt_From_int((__pyx_v_j_node[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 539, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_id, __pyx_t_26) < 0) __PYX_ERR(0, 539, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
          __pyx_t_26 = __Pyx_PyInt_From_int((__pyx_v_j_pos[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 539, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_pos, __pyx_t_26) < 0) __PYX_ERR(0, 539, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":540
 *                                            "type": 3})
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 5,             # <<<<<<<<<<<<<<
 *                                            "read_str": read[i - 5],
 *                                            "type": 3})
 */
          __pyx_t_26 = __Pyx_PyInt_From_long(((__pyx_v_all_seq_as_int[(__pyx_v_j - 1)]) + 65)); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 540, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_26);
          __pyx_t_24 = __Pyx_PyObject_CallOneArg(__pyx_builtin_chr, __pyx_t_26); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 540, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_node_str, __pyx_t_24) < 0) __PYX_ERR(0, 539, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          __pyx_t_24 = __Pyx_PyInt_From_long((__pyx_v_i - 5)); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 540, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_pos, __pyx_t_24) < 0) __PYX_ERR(0, 539, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":541
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 5,
 *                                            "read_str": read[i - 5],             # <<<<<<<<<<<<<<
 *                                            "type": 3})
 * 
 */
          __pyx_t_10 = (__pyx_v_i - 5);
          __pyx_t_27 = __Pyx_GetItemInt_Unicode(__pyx_v_read, __pyx_t_10, long, 1, __Pyx_PyInt_From_long, 0, 1, 0); if (unlikely(__pyx_t_27 == (Py_UCS4)-1)) __PYX_ERR(0, 541, __pyx_L1_error)
          __pyx_t_24 = PyUnicode_FromOrdinal(__pyx_t_27); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 541, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_24);
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_read_str, __pyx_t_24) < 0) __PYX_ERR(0, 539, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
          if (PyDict_SetItem(__pyx_t_25, __pyx_n_u_type, __pyx_int_3) < 0) __PYX_ERR(0, 539, __pyx_L1_error)

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":539
 *                                            "read_str": read[i - 4],
 *                                            "type": 3})
 *                     alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j - 1],             # <<<<<<<<<<<<<<
 *                                            "node_str": chr(all_seq_as_int[j - 1] + 65), "read_pos": i - 5,
 *                                            "read_str": read[i - 5],
 */
          __pyx_t_28 = __Pyx_PyList_Append(__pyx_v_alignment->info, __pyx_t_25); if (unlikely(__pyx_t_28 == ((int)-1))) __PYX_ERR(0, 539, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

          /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":544
 *                                            "type": 3})
 * 
 *                     alignment.n_mismatches += 3             # <<<<<<<<<<<<<<
 *                 # alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j-1], "node_str": graph_character,"read_pos": i - 4, "read_str": read[i-4] + read[i-3] + read[i - 2], "cigar": cigar})
 * 
 */
          __pyx_v_alignment->n_mismatches = (__pyx_v_alignment->n_mismatches + 3);
        }
        __pyx_L43:;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":548
 * 
 *                 # alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j-1], "node_str": chr(all_seq_as_int[j-1] + 65), "read_pos": i - 4, "read_str": read[i-5] + read[i-4] + read[i-3] + read[i - 2], "cigar": cigar})
 *                 alignment.path.append(j_node[j - 1])             # <<<<<<<<<<<<<<
 *                 alignment.n_indels += 1
 * 
 */
        if (unlikely(__pyx_v_alignment->path == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
          __PYX_ERR(0, 548, __pyx_L1_error)
        }
        __pyx_t_25 = __Pyx_PyInt_From_int((__pyx_v_j_node[(__pyx_v_j - 1)])); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 548, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_25);
        __pyx_t_28 = __Pyx_PyList_Append(__pyx_v_alignment->path, __pyx_t_25); if (unlikely(__pyx_t_28 == ((int)-1))) __PYX_ERR(0, 548, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":549
 *                 # alignment.info.append({"node_id": j_node[j - 1], "node_pos": j_pos[j-1], "node_str": chr(all_seq_as_int[j-1] + 65), "read_pos": i - 4, "read_str": read[i-5] + read[i-4] + read[i-3] + read[i - 2], "cigar": cigar})
 *                 alignment.path.append(j_node[j - 1])
 *                 alignment.n_indels += 1             # <<<<<<<<<<<<<<
 * 
 *             i = back_i
 */
        __pyx_v_alignment->n_indels = (__pyx_v_alignment->n_indels + 1);

        /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":478
 *                 alignment.n_mismatches += 2
 * 
 *             elif back_i == i - 4:  # insertion frameshift             # <<<<<<<<<<<<<<
 *                 # todo I think I still need to check the insertion-match model, not just the match-insertion
 *                 codon1 = codon_translate_0base[read_as_int[i - 5]][read_as_int[i - 4]][read_as_int[i - 3]]
 */
      }
      __pyx_L41:;

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":551
 *                 alignment.n_indels += 1
 * 
 *             i = back_i             # <<<<<<<<<<<<<<
 *             j = back_j
 *             coord = back_coord
 */
      __pyx_v_i = __pyx_v_back_i;

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":552
 * 
 *             i = back_i
 *             j = back_j             # <<<<<<<<<<<<<<
 *             coord = back_coord
 * 
 */
      __pyx_v_j = __pyx_v_back_j;

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":553
 *             i = back_i
 *             j = back_j
 *             coord = back_coord             # <<<<<<<<<<<<<<
 * 
 *         alignment.prepare_aa_gaf(graph)
 */
      __pyx_v_coord = __pyx_v_back_coord;
    }

    /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":555
 *             coord = back_coord
 * 
 *         alignment.prepare_aa_gaf(graph)             # <<<<<<<<<<<<<<
 *         alignment_score = alignment.id_score
 *         if alignment_score >= min_id_score:
 */
    ((struct __pyx_vtabstruct_5PanPA_9Alignment_Alignment *)__pyx_v_alignment->__pyx_vtab)->prepare_aa_gaf(__pyx_v_alignment, __pyx_v_graph); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 555, __pyx_L1_error)

    /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":556
 * 
 *         alignment.prepare_aa_gaf(graph)
 *         alignment_score = alignment.id_score             # <<<<<<<<<<<<<<
 *         if alignment_score >= min_id_score:
 *             alignments.push_back(alignment.gaf.encode())
 */
    __pyx_t_29 = __pyx_v_alignment->id_score;
    __pyx_v_alignment_score = __pyx_t_29;

    /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":557
 *         alignment.prepare_aa_gaf(graph)
 *         alignment_score = alignment.id_score
 *         if alignment_score >= min_id_score:             # <<<<<<<<<<<<<<
 *             alignments.push_back(alignment.gaf.encode())
 *     # need to free the memory, otherwise major memory leaks
 */
    __pyx_t_13 = ((__pyx_v_alignment_score >= __pyx_v_min_id_score) != 0);
    if (__pyx_t_13) {

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":558
 *         alignment_score = alignment.id_score
 *         if alignment_score >= min_id_score:
 *             alignments.push_back(alignment.gaf.encode())             # <<<<<<<<<<<<<<
 *     # need to free the memory, otherwise major memory leaks
 *     free(dp_table)
 */
      if (unlikely(__pyx_v_alignment->gaf == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
        __PYX_ERR(0, 558, __pyx_L1_error)
      }
      __pyx_t_25 = PyUnicode_AsEncodedString(__pyx_v_alignment->gaf, NULL, NULL); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 558, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_25);
      __pyx_t_30 = __pyx_convert_string_from_py_std__in_string(__pyx_t_25); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 558, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
      try {
        __pyx_v_alignments.push_back(__pyx_t_30);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 558, __pyx_L1_error)
      }

      /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":557
 *         alignment.prepare_aa_gaf(graph)
 *         alignment_score = alignment.id_score
 *         if alignment_score >= min_id_score:             # <<<<<<<<<<<<<<
 *             alignments.push_back(alignment.gaf.encode())
 *     # need to free the memory, otherwise major memory leaks
 */
    }

    /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":385
 *     # print(j_node, j_pos)
 * 
 *     for coord in global_max_coord:             # <<<<<<<<<<<<<<
 *         alignment = Alignment(read_name, read_len, global_max)
 * 
 */
  }

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":560
 *             alignments.push_back(alignment.gaf.encode())
 *     # need to free the memory, otherwise major memory leaks
 *     free(dp_table)             # <<<<<<<<<<<<<<
 *     free(traceback_table)
 *     return alignments
 */
  free(__pyx_v_dp_table);

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":561
 *     # need to free the memory, otherwise major memory leaks
 *     free(dp_table)
 *     free(traceback_table)             # <<<<<<<<<<<<<<
 *     return alignments
 */
  free(__pyx_v_traceback_table);

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":562
 *     free(dp_table)
 *     free(traceback_table)
 *     return alignments             # <<<<<<<<<<<<<<
 */
  __pyx_r = __pyx_v_alignments;
  goto __pyx_L0;

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":49
 * 
 * 
 * cdef vector[string] align_to_graph_sw_fsa(Graph graph, str read, str read_name, bint print_dp,             # <<<<<<<<<<<<<<
 *                                           vector[int] sub_matrix, int gap_score, int fs_score, float min_id_score,
 *                                           vector[vector[vector[int]]] codon_translate_0base,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_24);
  __Pyx_XDECREF(__pyx_t_25);
  __Pyx_XDECREF(__pyx_t_26);
  __Pyx_AddTraceback("PanPA.graph_smith_waterman_frameshift_aware.align_to_graph_sw_fsa", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_alignment);
  __Pyx_XDECREF(__pyx_v_graph_character);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_string_from_py_std__in_string", __pyx_f[1], 13, 0, __PYX_ERR(1, 13, __pyx_L1_error));

  /* "string.from_py":14
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)
 */
  __pyx_v_length = 0;

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_graph_smith_waterman_frameshift_aware(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_graph_smith_waterman_frameshift_aware},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "graph_smith_waterman_frameshift_aware",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_u_A, __pyx_k_A, sizeof(__pyx_k_A), 0, 1, 0, 1},
  {&__pyx_n_u_C, __pyx_k_C, sizeof(__pyx_k_C), 0, 1, 0, 1},
  {&__pyx_n_u_G, __pyx_k_G, sizeof(__pyx_k_G), 0, 1, 0, 1},
  {&__pyx_n_u_N, __pyx_k_N, sizeof(__pyx_k_N), 0, 1, 0, 1},
  {&__pyx_n_u_T, __pyx_k_T, sizeof(__pyx_k_T), 0, 1, 0, 1},
  {&__pyx_kp_u_This_is_the_dp_table, __pyx_k_This_is_the_dp_table, sizeof(__pyx_k_This_is_the_dp_table), 0, 1, 0, 0},
  {&__pyx_n_u__12, __pyx_k__12, sizeof(__pyx_k__12), 0, 1, 0, 1},
  {&__pyx_kp_u__13, __pyx_k__13, sizeof(__pyx_k__13), 0, 1, 0, 0},
  {&__pyx_kp_u__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0, 0},
  {&__pyx_kp_u__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 1, 0, 0},
  {&__pyx_kp_u__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 1, 0, 0},
  {&__pyx_kp_u__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 1, 0, 0},
  {&__pyx_kp_u__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 1, 0, 0},
  {&__pyx_kp_u__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 1, 0, 0},
  {&__pyx_kp_u__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 1, 0, 0},
  {&__pyx_kp_u__9, __pyx_k__9, sizeof(__pyx_k__9), 0, 1, 0, 0},
  {&__pyx_n_s_chr, __pyx_k_chr, sizeof(__pyx_k_chr), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_kp_u_dp_table_csv, __pyx_k_dp_table_csv, sizeof(__pyx_k_dp_table_csv), 0, 1, 0, 0},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_u_node_id, __pyx_k_node_id, sizeof(__pyx_k_node_id), 0, 1, 0, 1},
  {&__pyx_n_u_node_pos, __pyx_k_node_pos, sizeof(__pyx_k_node_pos), 0, 1, 0, 1},
  {&__pyx_n_u_node_str, __pyx_k_node_str, sizeof(__pyx_k_node_str), 0, 1, 0, 1},
  {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_u_read_pos, __pyx_k_read_pos, sizeof(__pyx_k_read_pos), 0, 1, 0, 1},
  {&__pyx_n_u_read_str, __pyx_k_read_str, sizeof(__pyx_k_read_str), 0, 1, 0, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_u_type, __pyx_k_type, sizeof(__pyx_k_type), 0, 1, 0, 1},
  {&__pyx_n_u_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 1, 0, 1},
  {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_open = __Pyx_GetBuiltinName(__pyx_n_s_open); if (!__pyx_builtin_open) __PYX_ERR(0, 20, __pyx_L1_error)
  __pyx_builtin_chr = __Pyx_GetBuiltinName(__pyx_n_s_chr); if (!__pyx_builtin_chr) __PYX_ERR(0, 24, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 30, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 33, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":20
 *     process_nucleotides = {0: "A", 1: "C", 2: "T", 3: "G", 4: "N"}
 * 
 *     out_dp = open("dp_table.csv", "w")             # <<<<<<<<<<<<<<
 * 
 *     graph_seq_chr = []
 */
  __pyx_tuple_ = PyTuple_Pack(2, __pyx_kp_u_dp_table_csv, __pyx_n_u_w); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":46
 *             out_dp.write("\n")
 *         line = []
 *     print("\n")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u__5); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":355
 *     # print(counter)
 *     if print_dp:
 *         print("This is the dp table\n")             # <<<<<<<<<<<<<<
 *         print_dp_table(graph_seq_len, read_len, dp_table, all_seq_as_int, read_as_int)
 *         # print("This is the traceback table\n")
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_u_This_is_the_dp_table); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("align_to_graph_sw_fsa", (void (*)(void))__pyx_f_5PanPA_37graph_smith_waterman_frameshift_aware_align_to_graph_sw_fsa, "std::vector<std::string>  (struct __pyx_obj_5PanPA_5Graph_Graph *, PyObject *, PyObject *, int, std::vector<int> , int, int, float, std::vector<std::vector<std::vector<int> > > , std::vector<int> )") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("PanPA.Graph"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5PanPA_5Graph_Graph = __Pyx_ImportType_0_29_36(__pyx_t_1, "PanPA.Graph", "Graph", sizeof(struct __pyx_obj_5PanPA_5Graph_Graph), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_5PanPA_5Graph_Graph),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_5PanPA_5Graph_Graph) __PYX_ERR(2, 5, __pyx_L1_error)
  __pyx_vtabptr_5PanPA_5Graph_Graph = (struct __pyx_vtabstruct_5PanPA_5Graph_Graph*)__Pyx_GetVtable(__pyx_ptype_5PanPA_5Graph_Graph->tp_dict); if (unlikely(!__pyx_vtabptr_5PanPA_5Graph_Graph)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("PanPA.Alignment"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5PanPA_9Alignment_Alignment = __Pyx_ImportType_0_29_36(__pyx_t_1, "PanPA.Alignment", "Alignment", sizeof(struct __pyx_obj_5PanPA_9Alignment_Alignment), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_5PanPA_9Alignment_Alignment),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_5PanPA_9Alignment_Alignment) __PYX_ERR(3, 4, __pyx_L1_error)
  __pyx_vtabptr_5PanPA_9Alignment_Alignment = (struct __pyx_vtabstruct_5PanPA_9Alignment_Alignment*)__Pyx_GetVtable(__pyx_ptype_5PanPA_9Alignment_Alignment->tp_dict); if (unlikely(!__pyx_vtabptr_5PanPA_9Alignment_Alignment)) __PYX_ERR(3, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initgraph_smith_waterman_frameshift_aware(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initgraph_smith_waterman_frameshift_aware(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_graph_smith_waterman_frameshift_aware(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_graph_smith_waterman_frameshift_aware(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_graph_smith_waterman_frameshift_aware(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'graph_smith_waterman_frameshift_aware' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_graph_smith_waterman_frameshift_aware(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("graph_smith_waterman_frameshift_aware", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_PanPA__graph_smith_waterman_frameshift_aware) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "PanPA.graph_smith_waterman_frameshift_aware")) {
      if (unlikely(PyDict_SetItemString(modules, "PanPA.graph_smith_waterman_frameshift_aware", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  if (unlikely(__Pyx_modinit_function_export_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_init_code();
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __Pyx_TraceCall("__Pyx_PyMODINIT_FUNC PyInit_graph_smith_waterman_frameshift_aware(void)", __pyx_f[0], 1, 0, __PYX_ERR(0, 1, __pyx_L1_error));

  /* "PanPA/graph_smith_waterman_frameshift_aware.pyx":1
 * # distutils: language=c++             # <<<<<<<<<<<<<<
 * # cython: profile=True
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */
  __Pyx_TraceReturn(Py_None, 0);

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init PanPA.graph_smith_waterman_frameshift_aware", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init PanPA.graph_smith_waterman_frameshift_aware");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* Profile */
#if CYTHON_PROFILE
static int __Pyx_TraceSetupAndCall(PyCodeObject** code,
                                   PyFrameObject** frame,
                                   PyThreadState* tstate,
                                   const char *funcname,
                                   const char *srcfile,
                                   int firstlineno) {
    PyObject *type, *value, *traceback;
    int retval;
    if (*frame == NULL || !CYTHON_PROFILE_REUSE_FRAME) {
        if (*code == NULL) {
            *code = __Pyx_createFrameCodeObject(funcname, srcfile, firstlineno);
            if (*code == NULL) return 0;
        }
        *frame = PyFrame_New(
            tstate,                          /*PyThreadState *tstate*/
            *code,                           /*PyCodeObject *code*/
            __pyx_d,                  /*PyObject *globals*/
            0                                /*PyObject *locals*/
        );
        if (*frame == NULL) return 0;
        if (CYTHON_TRACE && (*frame)->f_trace == NULL) {
            Py_INCREF(Py_None);
            (*frame)->f_trace = Py_None;
        }
#if PY_VERSION_HEX < 0x030400B1
    } else {
        (*frame)->f_tstate = tstate;
#endif
    }
    __Pyx_PyFrame_SetLineNumber(*frame, firstlineno);
    retval = 1;
    __Pyx_EnterTracing(tstate);
    __Pyx_ErrFetchInState(tstate, &type, &value, &traceback);
    #if CYTHON_TRACE
    if (tstate->c_tracefunc)
        retval = tstate->c_tracefunc(tstate->c_traceobj, *frame, PyTrace_CALL, NULL) == 0;
    if (retval && tstate->c_profilefunc)
    #endif
        retval = tstate->c_profilefunc(tstate->c_profileobj, *frame, PyTrace_CALL, NULL) == 0;
    __Pyx_LeaveTracing(tstate);
    if (retval) {
        __Pyx_ErrRestoreInState(tstate, type, value, traceback);
        return __Pyx_IsTracing(tstate, 0, 0) && retval;
    } else {
        Py_XDECREF(type);
        Py_XDECREF(value);
        Py_XDECREF(traceback);
        return -1;
    }
}
static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno) {
    PyCodeObject *py_code = 0;
#if PY_MAJOR_VERSION >= 3
    py_code = PyCode_NewEmpty(srcfile, funcname, firstlineno);
    if (likely(py_code)) {
        py_code->co_flags |= CO_OPTIMIZED | CO_NEWLOCALS;
    }
#else
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    py_funcname = PyString_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    py_srcfile = PyString_FromString(srcfile);
    if (unlikely(!py_srcfile)) goto bad;
    py_code = PyCode_New(
        0,
        0,
        0,
        CO_OPTIMIZED | CO_NEWLOCALS,
        __pyx_empty_bytes,     /*PyObject *code,*/
        __pyx_empty_tuple,     /*PyObject *consts,*/
        __pyx_empty_tuple,     /*PyObject *names,*/
        __pyx_empty_tuple,     /*PyObject *varnames,*/
        __pyx_empty_tuple,     /*PyObject *freevars,*/
        __pyx_empty_tuple,     /*PyObject *cellvars,*/
        py_srcfile,       /*PyObject *filename,*/
        py_funcname,      /*PyObject *name,*/
        firstlineno,
        __pyx_empty_bytes      /*PyObject *lnotab*/
    );
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
#endif
    return py_code;
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, (size_t) (ulength * result_ukind));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
    else state = (PyGILState_STATE)0;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* unicode_iter */
static CYTHON_INLINE int __Pyx_init_unicode_iteration(
    PyObject* ustring, Py_ssize_t *length, void** data, int *kind) {
#if CYTHON_PEP393_ENABLED
    if (unlikely(__Pyx_PyUnicode_READY(ustring) < 0)) return -1;
    *kind   = PyUnicode_KIND(ustring);
    *length = PyUnicode_GET_LENGTH(ustring);
    *data   = PyUnicode_DATA(ustring);
#else
    *kind   = 0;
    *length = PyUnicode_GET_SIZE(ustring);
    *data   = (void*)PyUnicode_AS_UNICODE(ustring);
#endif
    return 0;
}

/* GetItemIntUnicode */
static CYTHON_INLINE Py_UCS4 __Pyx_GetItemInt_Unicode_Fast(PyObject* ustring, Py_ssize_t i,
                                                           int wraparound, int boundscheck) {
    Py_ssize_t length;
    if (unlikely(__Pyx_PyUnicode_READY(ustring) < 0)) return (Py_UCS4)-1;
    if (wraparound | boundscheck) {
        length = __Pyx_PyUnicode_GET_LENGTH(ustring);
        if (wraparound & unlikely(i < 0)) i += length;
        if ((!boundscheck) || likely(__Pyx_is_valid_index(i, length))) {
            return __Pyx_PyUnicode_READ_CHAR(ustring, i);
        } else {
            PyErr_SetString(PyExc_IndexError, "string index out of range");
            return (Py_UCS4)-1;
        }
    } else {
        return __Pyx_PyUnicode_READ_CHAR(ustring, i);
    }
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType_0_29_36
#define __PYX_HAVE_RT_ImportType_0_29_36
static PyTypeObject *__Pyx_ImportType_0_29_36(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_0_29_36 check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_0_29_36 && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_0_29_36 && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionExport */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
